{"pages":[{"url":"/pages/about-this-blog.html","text":"Since we Code Club is only once a week, this blog is a way to provide more detail than can be covered in each session. Hopefully the extra information helps those keen to learn more, and are excited to work on even more interesting projects.","tags":"pages","title":"About this blog"},{"url":"/pages/introducing-new-things.html","text":"This post follows on from a previous post about keeping coding interesting with multiple skill levels . In this post, I'll be expanding on the idea by talking about putting together new activities to run at your Code Club or insert-you-coding-maker-startup-equivalent-here. Types of activities Although not every activity needs to be step-by-step, the expectations need to be clear. In the example of designing a game, the pre-requisites must be clear so that it's possible to complete the activity comfortably, with enough challenges to keep it interesting. Not having the right pre-requisites can prove frustrating for kids, as is skipping important steps e.g. having a clear idea about what state a game will be in at the first milestone. If the activity shows a basic framework for a bigger project, then this should be clearly stated. Start from a working example and work backwards The way that I write guided activities is by starting from a working model and tracking backward through the steps, until I find myself back at the start. This is really one of the most fun things to do, because it means that you have to sit down and play; essentially building something that is enjoyable, fun, and exciting. Sometimes if the idea it a bit more complicated, I'll leave resources that are files that can be downloaded. On an old TV show known as the Curiosity Show I loved watching as a kid, I found it hilarious when they would always say, \"and here's one I started making earlier\" to fast forward through anything mundane. In the same way, sometimes it isn't feasible for kids to draw every single sprite, because that's part of the customisation they'll do later. Make sure each step covers only one main task or milestone, adding a clear instruction to test and save, and give some sort of visual clue as to what their project should look like at that point. To develop your working example is just a matter of sitting down and making something without really making too many notes, and just snapping the odd photo at a key point in the contstruction/development. It's a great time to just relax, and enjoy creating. This is the feeling you'll want to be duplicating with the activity you put together later. Try to aim to get a basic version of your idea working first, then add small features to make it better. Whenever I come across something inspiring or useful, I'll try to take note of it straight away, so that I can refer back later rather than forgetting about it. It's amazing how one things leads to another and suddenly you find yourself with a creation that is rather unique. The other advantage of starting with a working model is that you can show people and get feedback one whethe it's good, before you spend your time putting together a pointless activity (like the time I wrote up a cool Python acticity to teach functions, only to realised that Code Club already had almost the exact same activity already written - ha!) And don't forget to keep an eye on the time. You'll want to have a good idea how long it will take to do. For instance, our robot workshops can usually be done in two one hour session...unless things don't work right that day ;). We've actually had some huge fails before...at one point I thought everyone was going to rage quit because we had a few frustrating session in a row. But it all worked out, and some of those kids are still super motivated, and doing awesome things now. What, why, how As a kid, I always found it frustrating whenever we had to do something that seemed to have no context or application. The other thing that confused me, what not knowing how far through an activity we were, and just having to keep asking, \"ok what do we do now?\". So I try to make a point of explaining these things when introducing an activity. What: explain what we'll be achieving in the hour Why: explain why it is a useful activity and what it could enable us to do in terms of more advanced/fun/interesting activities in the future How: show the path we'll be taking to our final goal(s) and give some milestones so the goal isn't too distant Initially I tried using slides, but slides can take time out of our one hour activity, and at the end of a long day, even I have trouble paying attention to a slide deck. This brings me to Infographics ; a quick way to get a process and related ideas across really quickly. Here's an example I made on Vengage for free : Once we know where we're going, everyone is super keen to rampage toward the first milestone. Cheat sheets Cheat sheets are a great reference as long as they are really minimal. By minimal, I mean only the information that is required for the task . Anything else is just distracting. In our Python GoPiGo robot workshop, I usually put a few basic Linux commands on the whiteboard, to save kids scrolling back and forth through the activity document. Use cheat sheets to give almost instantaneous access to reference material i.e. faster than it takes to sort through Google search results. Test out the activity You'll need a guinea pig to test out your activity. It usually works well if that person is around the same skill level as the activity is designed for. e.g. if you get your grandma to try the project, and it takes a week...that's not a real good indicator of how long a bunch of 11 year olds would take to do it. While you get your activity tested, get some feedback on what is clear and what is a bit confusing. Later, go back over the activity in your mind, and make relevant changes that would have smoothed out whatever bumps your guinea pig tripped over. Again, use only what you need to get a message across As before with the minimal cheat sheet, you want to supply only the information that is required for each step of the activity. It's ok to explain why we're doing something, or have a quick bit of background for something, in one sentence; just be careful about using a full screenshot where one sentence would be enough. And likewise, don't spend a paragraph explaining something where a screenshot would make it crystal clear in a second. Make sure you crop any irrelevant parts of any images, while keeping enough to give it context. If you can't do that, just say where to find a particular icon or software feature e.g. \"In the bottom left, you'll see the Scratch stage\". Check for understanding or make sure it's clear Yep, I've probably mentioned this one before. I try to remind the kids at our Code Club to hassle me up if I say something that doesn't make sense to them, or isn't clear. That way, I start to make sure I explain things better too. However, in an activity that I've written, I try to give the kids a way of checking their code or whatever they're building. This could just be a listing of the code they're adding, that shows where they need to add it. Or perhaps add a quick screenshot to show what the screen looks like when the code runs. Give a suggestion for any common mistakes that you've seen during testing, and if you're supervising the activity, be sure to point back to the section if the answer to a question is already written. Suggest next steps or how to apply the new skills This is a great way to get the more advanced kids to jump straight into more challenging task, and apply their new skills. It's helpful to remind the reader what they've achieved and how it will make new things possible when bringing their own ideas to life. A good example might be to explain how an activity has prepared them to apply some of the concepts to robots, or how the activity can be combined with another previous one. And of course, be sure to get kids to show each other what they've made.","tags":"pages","title":"Introducing new things"},{"url":"/pages/keep-coding-interesting-for-multiple-skill-levels.html","text":"Guided learning verses multiple stream choices In our own Code Club, we've taken a few different approaches: picking out individual interesting projects from the Code Club curriculum each week; following the curriculum in order; providing a variety of activities that provide students with skills ranging from various forms of visual coding to 3d design for 3d printing; and providing short-term workshops that apply coding skills, in areas such as robotics and web applications. These are some of our experiences with each of those approaches. There was a tendency for some students to gravitate toward the less code-orientated activities. At first we thought that this was a good thing. I mean, they were engaged and learning some skills. Of course this is a good outcome - but what happens when the same student wants to build a robot, or has an idea for a new feature, after only doing 3d Printing? For this reason, it's been helpful to keep kids doing the Code Club curriculum long enough to get a good grounding in coding before tackling other areas. To make this work, especially with larger groups, the ability to help kids quickly with any questions that come up and potentially slow down projects, is important. As a volunteer or teacher, taking the 20 minutes to complete the activity beforehand makes a huge difference to how quickly you can assist or walk through the troubleshooting process. In order to do this, timely notifications to volunteers or teachers of upcoming projects will give them more flexibility to schedule a time to go through the projects themselves, prior to a session. A free collaboration platform that works on mobile devices as well as computers, allows sharing of tricks and tips, while providing a common notification channel that is easily accessible at convenient and flexible times; for our Code Club we started using a free Slack with only 2 organisers, and ended up extending a subset of this to volunteers. Other alternatives, such as hipchat, are available. The important thing to consider when choosing a platform to collaborate on is whether it is easily accessible by your team and within budget. Although a share group chat on SMS could work, the advantages of these other solutions, is that they allow integration with other systems e.g. file sharing, calendars etc. and it is easy to paste documents or photos. It's important to remember privacy rules that apply to information - so use the same rules as for any online service i.e. don't post personally-identifiable information from other systems. In our first six months of running a Code Club, we focussed mainly on visual programming with Scratch , picking out interesting projects from the Code Club World Curriculum , answering quesions as they came up. It wasn't long until we had a few students make their own games, that they showed to the group, and this resulted in a few more games being written. This was great to see, and the kids that already had a grasp of coding principles did really well. However, subsequent questions that arose pointed to some gaps in skills due to us too eagerly skipping through some of the Code Club projects. One challenge is that we progress at different rates and students start out with varying experience levels. Other factors included available time, access to computers and Internet at home, and the amount of assistance that friends or family are able to give. Since we generally have a set group of students who attend each session, there is the opportunity to get to know where everyone is at individually and, to a limited extent, give them projects that fit with learning requirements. This isn't always the case, and so often a catch-all approach of having everyone go through the curriculum in order, can be a way of minimising gaps in knowledge and skills, while fielding questions that also give insight into whether a student a new challenge. A key ingredient to this recipe is having material to cater to those students who move faster, or already have skills and don't need to do some of the projects. Having said that, our aim is really to give kids an understanding of programming, not just to let them be programmers, but to allow them to know what can be achieved in order to give them more opportunities to harness technology. Whether they end up marketing or designing, having the appreciation and ability to communicate with coding e.g. quick prototyping or demonstrating, can be a valuable base and inspiration to launch other endeavours. At a minimum, it's great to see students with at least enough knowledge to conceive innovative projects then collaborate to make these work. Branching out Once students have a reasonable grasp of basic programming concepts it's great to reinforce those skills by applying them to their own projects, but soon it will be time to branch out to making more useful software to create some practical solutions to problems. Some of the useful concepts that can be learned from visual programming e.g. Scratch (Tickle to a smaller extent) etc. include: iteration e.g. loops such as repeat..until or forever variables e.g. keeping a score during the game, or waiting until a specified number of chances have run out before ending a game list structures e.g. creating and manipulating lists of things such as names branching i.e. making a decision to change program flow based on conditions using if..then nesting i.e. putting branching or iteration structures within other structures simple functions e.g. creating a new custom command in Scratch to handle jumping A number of volunteers have expressed frustration with trying to wean kids off visual programming. A few useful benefits of moving away from simple visual programming can be: interaction with physical or other external environments including files, motors, lights, network services, sensors, and cameras learning more elegant solutions for real problems, that can be used in more environments than just a browser being able to model the solution to a problem more easily using inheritance object-orientated programming using or adding to pre-written modules to allow seemingly complicated tasks to be performed with simple functions allow more advanced access to interesting hardware such as robots or add-on electronic components In our Code Club we are lucky enough to have skill sets that cover a variety of areas. As soon as you locate these type of resources, it's a good idea to look at duplicating some of these skills across other volunteers/teachers involved with your team/club. By this, I'm referring to creating some sort of information repository with some training and collaboration where possible. Having said that, even if you don't extra skill sets, since the Code Club curriculum, or whatever you are using, is designed for kids, as an adult it's going to be easy enough to do yourself, and as I've mentioned there's lots to gain from doing this. Personally I've learned a ton from going through other peoples' projects and following along with tutorials on youtube, or just in books. Teaching multiple levels So now we come to how to actually juggle multiple students running at different skill levels, at the same time within that one hour or so of coding. As I've mentioned to other teachers/volunteers, it really comes down to having something extra up your sleeve. I learned the hard way with a bunch of kids chomping at the bit while I'm trying to make things up on the fly, and help other kids, the more pre-written activities you have ready, the better. This could just be a matter of having an extra activity pdf ready on a file share or however you distribute these. Even if it's not a whole activity, it helps to have a list of stock standard challenges to use. So for Scratch, here's a few I suggest myself: add a scoring system: use variables work out how to add another level or more: broadcaste events extra features, such as new enemies/obstacles/tools copy sprites and modify for 2 player: write scripts once, modify for second player and scale up the game to accomodate convert variables like energy or score to graphic representations: use costumes on a sprite, and match the score or health to the costume number add a menu: similar to the multi-level one cheat mode, extra difficult mode, powerups Something that Rik from Code Club UK reminded me of, is to always give the kids a hint, or at least make sure they have an idea of how to do the challenge. That way, you know their mind is already ticking over and they won't just be sitting there not knowing what to do. Encourage questions At the other end of the spetrum, there are the students for whom things just don't make sense at one point or another. As most teachers will know, it's important to always check for understanding . The problem I've come across is that when I ask whether kids understand something they'll say \"yeah\", and then proceed to show that they don't quite \"get it\" yet. That used to be me, until someone explained to me that it was fine to say \"I don't quite get it\", because then they could teach me. It occured to me that often saying \"no\" feels like an admission of guilt i.e. not listening properly. Telling the students that there's no dumb questions, and sharing that I was actually the kid who \"didn't get\" things, helped with this a bit. Having spent a number of years selling in another life, I've learned that if I want to get a message across, it's my responsibility. Asking those open-ended questions can be great to both determine where a student is at with their learning, give you some ideas of activities to suggest, and better ways to explain things. Having a good knowlege of the activites you have up your sleeve is helpful if you identify larger gaps in knowledge than you can fix in a short conversation. That way, it's easy enough to just suggest, \"ok, what about having a go at this activity here, because it shows you how to do all these things you're wanting to do?\" When things don't work during a session Whenever you're giving students additional activities, either because they've already mastered most skills covered, or they're catching up on something they've missed, there's a higher chance of things not working. There's lots of reasons why this could happen, one being that teachers/volunteers may be less familiar with the content not yet used with the majority of students. These days I find myself trying to be better prepared for things that fail. Luckily, I've found I have also improved at making things that fail less by: having multiple sets of batteries for robots, and using a battery tester to ensure they are well-charged; using an access point that I control, if I'm relying on devices that I can't easily test on the network provided; having others review any custom activities before running them; keeping objectives clear and attainable at the start, so that students will be gain confidence by achieving things early on, before progressing to more involved tasks; using computers I have access to outside of Code Club, e.g. Raspberry Pis or spending time testing on one of the laptop builds we're provided with; and trying to have a simpler version of the activity that I can fall back to, in the case of partial failure of my environment. In simple terms, have an extra activity that will in the worst-case scenario just work with basic functionality, but with scope for lots of additional challenges if things go better than expected. That way students who want more, will at least get an extra activity, and in the case that everything works really well, there's enough scope to accomodate that too. Multi-tasking with extra activities Setting up lots of checkpoints where students get feedback in anything custom I write, really helps when delivering. This allows you to have students progressing with an activity, while allowing a method of checking that progress. e.g. \"how are we going getting to point B?\", or \"Follow the directions and do X\", which allows a bit of a chance to help others, or keep track of other activities that may be running. Timing is crucial, as having to fiddle too much with something can often leave students idle and getting distracted. Even giving a simplified description of what you're doing to fix something that's not working as expected, can keep students engaged. Although often it's just easier to have the more advanced students help others while you fix the issue in their extra activity. Either way, \"would you be able to do this for me?\" or explaining how you're fixing things, keeps the learning happening. Small diversions When we've set up too many activities, we found some of our students were able to get engaged where they had previously stalled on their set projects. This seemed good at the time, except that the opportunity cost of that was that later it was very difficult to get them back on track due to missed concepts and distraction. Sometimes a small activity can work, but for us we have needed to communicate that it will only be a temporary deviation, and not a change in learning path. To this end, we have compared a number of different groups where we've more strictly kept to a logical path, and noticed that there is more focus with less distraction, resulting in greater options later due to a more complete base coding skill set. In some cases, when students have created something in their spare time, we've done well by having them speak briefly at the beginning of a Code Club session. It's imporant to keep these focussed, as the aim is to motivate others, but not distract them or add confusion regarding the direction of learning. This is not to say that creativity isn't encouraged, but that opening things up prematurely has cost us later on, when we've had to backtrack to fill skill gaps. Charting progress It's easy for extra work or good wins in learning or creativity to get lost in the activity and go unrewarded. We recently introduced simple logging of completed projects so that teachers and students can see their achievements, and it's easier to see where help or challenge is needed over each term. There's a definite advantage in making sure as many projects get to the completion stage, as it keeps the pace up, while enouraging some collaboration around troubleshooting and learning. I urge our kids to make the very most of their time and work our volunteers and teachers hard. It's great when they push us as I'll find myself writing more Code to answer questions or demonstrate concepts. Conclusion To summarise this slightly longer post: for groups that have regular attendees, sticking to a clear path of set activities helps prevent skill gaps later, and allows more interesting projects to be tackled be ready to communicate (and demonstrate if possible) the benefits of progressing into more challenging coding e.g. from Scratch to Python, and set reasonable expectations that this will happen at a predicted point in time do some extra preparation at some point outside of Code Club, to ensure you have extra content for both advanced students, and those who need activities to fill any missing skill gaps to catch up as learning paths diverge, make sure you have clear checkpoints for objectives so that you can either jump between multiple student projects, or tag team another volunteer at various points ensure that extra activities have a worst case path if certain things fail during the session, so that students will still gain be clear that any small diversions will be temporary, so that there is transparency and clarity in learning paths do the activities beforehand, to maximise the value you can offer to students during the sessions encourage questions so no one gets left behind harness show and tell in a focussed manner and finally, chart progress and strive to complete projects.","tags":"pages","title":"Keep coding interesting for multiple skill levels"},{"url":"/pages/code-club-python-environment-cheat-sheet.html","text":"Last year our Code Club attempts with Python and IDLE were a bit frustrating. Well more frustrating than this year at least :). I noticed that a few things were a bit hard to read and didn't show up properly, so I've fixed those. So put this cheat sheet next to you while going through the Code Club Python activities. It relates to MacOSX, Windows, or Linux (we've used Raspberry Pis for our Dexter Industries BrickPi EV3, GoPiGo, and Minecraft Python sessions). Our environment uses three windows in MacOS and Windows: a text editor Python shell commandline terminal There's also some cool tricks for having multiple windows when connecting to Linux with ssh, which will get to in a later post! The cheatsheet gives examples to make us able to edit and run out Python in different environments. For those who didn't really manage to get much done during our noisy Code Clubs, or something just didn't work, have another go at home when it's quiet. As a few keen people have done, you can download Python 3 from https://python.org. That's probably the easiest to use. It also covers running your scripts. I think we're slowly getting better at troubleshooting Python errors :) I've put the updated cheat sheet here","tags":"pages","title":"Code Club Python environment cheat sheet"},{"url":"/pages/scratch-basics-roundup-slides.html","text":"I threw together a slide deck a while back, for our Code Club, to go through some of the Scratch command blocks we used during 3rd semester. We used this at the start of one of our sessions, and got the kids to explain what commands did, and when they would use them. There's a few at the end, that we hadn't used, put in just to keep it interesting and stimulate a bit of learning. Just in case it might be useful for other Code Clubs, I've provided a link to download it here .","tags":"pages","title":"Scratch basics roundup slides"},{"url":"/term-1-and-2-2018.html","text":"A Quick Recap on Last Year Last year was great. We put together some fun projects, including whack-a-mole and a micro:bit plant, and we had a couple of groups get further in Python than we'd ever been in previous years. Keeping track of students' progress really helped us get an idea of what concepts were being learned and also levelled the playing field in terms of giving both the louder and quieter kids a go at more advanced projects, based on what skills they'd learned rather than how loudly they expressed that they wanted to move on. By looking at UK Code Club curriculum skills matrix, students were able to have an idea of which projects to pick to get a good coverage of concepts. At the end of the year, we were quite proud of our two groups of Python kids, and how far they'd come! I bought some Python stickers from Python Gear , that supports the Talk Python To Me podcast , that also donates a portion of the money to the Python Software Foundation . Building a Simple Python Project with Hardware The micro:bit plant is one of those projects that lots of people build with micro:bits, in one way or another. When we looked at it last year, I drew the idea on the whiteboard for a couple of students. They had a reasonable understanding of Python basics, having completed enough projects from Code Club's Python modules 1 and 2 to get coverage of all concepts listed in the UK curriculum skills matrix. The whiteboard drawing showed how things were connected, and was intentionally limited to displaying a happy or sad face, based on the level of moisture in the soil. It was a nice surprise when one of the students 'connected the dots' and exclaimed that we could operate a pump as well - which we later set up for Kid Inventors day. For the basic idea, I quickly explained how the sensor was powered and that they would need to work out how to read the pin, that the signal of the sensor was connected to - having talked about the greater scope of Python and importing modules, they had looked up the documentation in a few minutes and worked on finding the value at which the plant should tell us it needed water. The plant ended up living in the school office for a few weeks, and we took it to Kid Inventors day at a local library, where it turned out to be a fairly popular project. Back to 2018 Moving on to this year, we had some of these students come back as volunteers! Since the school stopped using the software we were using to track progress, I've been encouraging volunteers and teachers to be more active in 'checking in' with Code Club kids, and this has meant we have a better idea of where everyone is at, and also means we don't just talk to those that are louder, or ask for help. A Few Changes To Our Code Club We made the tough decision to have only offer Code Club to grades 5 and 6 this year. As there is more coding for the earlier years in the Australian school curriculum now, and we only had resources to run one session a week, and based on last year's promising projects, we opted to focus on these grade levels. It means that everyone still gets a chance, and continuity is better, and we could go much further during the year. Ideally, we'd love to end up running a few projects/workshops at once in term 4, to really show the application of Python in more real-world contexts. To facilitate this, and quell a bunch of kids getting a bit burned out on Scratch, we took the leap and started everyone on Python this year. This also required a bit more support from volunteers, but that's what we're there for, after all.","tags":"codeclub","title":"Term 1 and 2 2018"},{"url":"/2017-in-review.html","text":"After making a few changes to the running of our code club this year, it's nice to get a chance to sit back and reflect on how it all went. In previous posts, I've tried to brain-dump as we progressed - with some of my immediate thoughts and reactions to each month, or two..depending on how much was going on. We had varying levels of success with some of the changes, so I thought it useful to go over some of the year's highlights as we see out 2017. Changing how we identify those kids that need more In past years, we found that quieter kids who achieved more, were sometimes being overlooked. Others who didn't put up their hands as much when they had trouble become more frustrated and inevitably progressed less. Since we tracked everyone's progress with an app this year, we were able to progress those that had done more promoting a good mixure of quiet achievers and louder kids going through to Python. Over the years we have run code club, I've found that it really helps to take an interest in what everyone is doing, and regularly check in to see what various students are going. Although, we really need to apply this consistently with all our volunteers - because once you have enough volunteers, waiting for hands to go up seems a less efficient way of keeping communication channels open with students. Setting expectations The feedback we received from parents was that we reduced distractions this year, by setting expectations up front. It's probably useful to take into account that we also seem to grow our numbers each year; and since code club is free for kids to attend, there's potential for some parents to abuse that as an alternative to after-school care. Having said that, in some cases I'm sure there's kids, in that situation, for whom code club becomes beneficial, and they later carry on to develop their skills further. By explaining that each code club project should take under an hour to complete, we had a quicker turnaround on projects: as a result, kids were less likely to become bored because they were able to feed their curiosity - and progress further in both skills and breadth of experience. In some cases, kids express trepidation in continuting if they felt they had fallen behind slightly, so I made it clear that not everyone has to be synced up on every activity, and that we eventually arrive together. Realistically, everyone seemed to get sick at some point this year, anyway. Simplifying custom projects like robots and raspberry pi This year we: changed from Raspberry Pi/Lego Mindstorms robots, to the BBC micro:bit and its robot accessories; used the Raspberry Pi in conjunction with Code Club activities, to give a smoother transition from Scratch, with less steps/intersections; and stream-lined the introduction of concepts by selecting suitable activities, with careful consideration to delivering these in logical progression. Changing session structure We worked hard to change attitudes toward logins, makinge students and parents more accountable for access to required online services like Scratch and Trinket; this encouraged kids to code more at home, which increased visibility of activities for parents. In order to ease management of groups, we split grades 3/4 and 5/6 into separate semesters. In hindsight, this allowed us to manage kids as a collective group with increased frequency, and therefore, efficiency. Overall, we attempted to keep the main focus on increasing coding skills, while I kept enough advanced activities up my sleeve so no one was left idle or unchallenged for long. In Python projects, we talked about our long and short term objects based on the skills gained from completing each project. This empowered students to customise their own learning, to some extent, while having a wholistic view of their own journey into coding. With groups working on similar activities seated in close proximity to one another, an atmosphere of dilligence and excitement appeared. We really had much better focus in the Python groups and really got to 'dig in' to some interesting solutions and code refactoring. We learned about \"don't repeat yourself\" (DRY) in Python, thanks in part to a nice segway from the more advnaced Scratch projects covered. Another valuable initiative had teachers from the greater school involved on a weekly basis to give them a better understanding of how things ran, and feed into their curriculum teaching, and get their thoughts on coding, and how we implemented the activities. Other than Python, we had groups work on projects with our Makey Makeys (woohoo for whack-a-mole and other projects!) - this allowed students to use Scratch to explore human input, instead of just the keyboard and mouse. Presentations/demonstrations/special events We also managed to get involved in our usual compliment of events, which included: Student demos at the Future Schools exhibition, in python (micro:bit), and scratch (various levels) Moonhack expanded from getting over 10,000 kids coding last year, to an internation spread this year. As a code club, we were better prepared ahead of time, and allocated time during code club where kids could write their contributions. We integrated our end-of-year get together into last code club session and invited parents Code club student projects were integrated into the Student and Parents' night Assembly and newsletter updates continued to be delivered to the greater school community Python kids created a project that improved care of a plant by using the BBC micro:bit to measure soil moisture levels. The project was displayed proudly at the front of the school, for visitors and parents to see We had more code-related books in the library this year Code club students worked on and delivered presentations, incorporating pratical demonstrations, to Chinese students from sister school Although there is still more work to be done, the net improvement was positive and overall we reached new levels of achievement in our Python skills. For more details on what we did, you can read some of my previous posts.","tags":"codeclub","title":"2017 - in review"},{"url":"/python-kids-end-of-term-3.html","text":"You may remember from a previous post , that our small sub-group of kids working on Python was picked by finding those that had progressed more than 50% through the Code Club Scratch 2 module. Of those students, a couple opted to stay on Scratch - leaving four that were keen to get started on Python. One student had already done all of Python module 1, which was really great to see. To get a good idea of what concepts were covered by each activity, I took the Python group to the Code Club UK curriculum skills matrix: https://codeclubprojects.org/en-GB/curriculum/ This turned out to be really useful as students were able to accelerate their progress; while making sure they still got good coverage of skill areas that would allow them to gain a practical amount of Python. Teachers should also consider looking at the Australian Code Club curriculum skills matrix, since incorporating this well-tested content into the classroom would make teachers' jobs easier, and allow Code Club time to be spent on more advanced projects. Over the few years of running a Code Club, we've really noticed the difference in students grasping concepts and being able to enjoy Code Club much more since the amount of coding in class has been increased. They're struggling less with the basics, and able to have more realistic ideas of what they can create and are quicker to find solutions for problems they face in code. In a nutshell, they're more fluent in translating their ideas into something that can be created using programming, physical making, and making their ideas practical and scalable. This type of technological literacy means that students are probably more likely to be able to model and solve problems in a viable way. An fitting analogy might be the songwriter that can't drum, trying to explain to the drummer what he envisaged for a particular part of a song. The context is in the songwriter's head, but communicating with the drummer is much easier when the songwriter can simply tap out the beat and fills, or even play the part on the drums. There's also a degree of mutual respect that comes from knowing another's craft, if even to only a basic extent. Two Python groups for next term So our keen group of Python students have been progressing really well. We seem to have good coverage of the Code Club UK Python curriculum skills, which was partly driven by the kids themselves, with some asking how to look up the skills matrix after I showed them in previous weeks. So looking forwards - I picked our next group, based on their logged progress with the Code Club Scratch 2 modules. The criteria is essentialy anyone who has completed more than 50% of Scratch 2. This means we'll have another group going through the Python 2 learning modules next term; the original group will be looking at the Sense HAT and the BBC micro:bit. In order to prepare for some presentations of their progress at the beginning of next term, a couple of students did some micro:bit and Sense HAT exercises last term. Volunteers training up In addition to our two groups of Code Club students, a couple of our volunteers have also been working through the Python exercises. This is a great thing, since we're starting to gain some redundancy so that I'm not the single point of failure, if one week I can't make it to Code Club. Of course there's also volunteers that turn up each week and are ready to pitch in whereever they are needed - this is definitely an equally valuable, and necessary strength to our current team. We also rotate through various teachers that attend each week, two at a time; attitudes vary from the indifferent, to the more eager, however we notice significant enthusiasm and motivation coming from student teachers that attend Code Club during their placements. The latter is very encouraging, since they will be the next generation of teachers. An attitude of opportunity A different mindset is evident in the students progressing through to Python: They come to see Python as an opportunity, rather than just something they're told to do. Sure, there's days when they might be tired, or struggle a little to focus, but the overall impression is that they choose to attend, and are keen to earn the opportunity to be able to do more each week. What a change this is from previous years! A couple of weeks ago, I was a bit late to Code Club, and was excited to see that the Python kids were still working through their activities, and the more advanced were keen to see if they could carry on with our extra projects involving micro:bit robots and Raspberry Pi computers. Catching up - progress rather than comparisons Something I try to maintain, is that Code Club is about progress, rather than competition. Often, if someone has missed a week, there may be a sense of disappointment that they might be 'falling behind'. In these cases, after being reassured that everyone is at different stages, students tend to relax a bit more and carry on, enjoying the journey. And since everyone generally misses one or two days being sick or due to other commitments, it seems that things usually balance out by the end of term, anyway. Finding their paths Of course, not everyone needs to progress to Python. There's a wealth of content created by Code Club, so it's quite satsifying to keep going with Scratch (I recall that there's 3 Scratch levels now, with additional projects on top. It's always fun to bring out the makey makey, Spheros, and other devices to change things up a bit, every so often. That being said, we've also learned from past experience, that any such diversions should be introduced as such, rather than a full change of path from learning to code, even if coding may start to incorporate makey makey and other devices. With coding as the core enabler, we're able to take students through 3d print design and other such pursuits - I'm patiently awaiting the day when someone finally combines all these components to make a truly hybrid project, in the sense that they program hardware, build prototype physical design to house the hardware and enable specific tasks to be accomplished: a combination of 3d printing, coding, with interesting sensor and motors as the input and output. In terms of finding their paths, I feel it important that we can support those paths. Thinking back to my own school days, I remember scraping the surface of an area of knowledge, only to be told to move on once we'd finished that component of the curriculum. The beauty of Code Club, is that the content is so rich, and because it truly is a club - we are able to empower them to find something in it for themselves. I wrote this at the start of the term, and now we're nearing the end of term 4. I'll write another current post, as this seemed to take a while and went through a lot of changes and re-edits. I'm posting it for continuity, though.","tags":"python","title":"Python Kids - End of Term 3"},{"url":"/term-3-2017-first-python-group-2nd-semester.html","text":"As I've mentioned a few times recently , our students have been recording completed projects - this works both as a way for them to measure their progress, and for us to know how everyone is going. Something I've noticed, is that when someone gets a bit bogged down, whether it be due to things not working or making sense, or even just when working on a particularly tough bug, sitting down with them and working through it together seems to have a long-term positive effect on that student. There's often a subtle attitude change whereby they'll have renewed energy and also more confidence in themselves, and invariably we'll see those students really putting in the effort afterwards. I really feel that if someone doesn't quite get something I've shown them, it's my responsibility to try and explain it in a different way. The Right Time to Move on to Python So with Moonhack under our belts for the year, we started a few activities and picked our first group to move onto Python. Since the grade 6 students in this group are on their last year before leaving the school and Code Club, we try to give them priority. However, this is not to say that someone else working well won't get to do more as well. Looking through myEd, I was able to see which students had completed more than 50% of the Code Club Scratch2 module: the completion amount varied between 50 to 80 percent. Looking at the Scratch2 skills mappings, it's quite easy to get an idea of what concepts those students will be familiar with, and match up the suitable Python activities. Currently, I'm considering that we'll move onto some sort of hardware-based activities next. These could include: Robots, either GoPiGo, BrickPi, Mirobot, or BBC micro:bit based, especially as a few of our students have these already Code Club's Sense Hat simulation activities, moving on to a real Sense Hat on one of our Raspberry Pis A Python Flask web application activity that I wrote and trialled last year Some Quberider exercises Preparing for A Bigger Project Time-permitting, either of these could presumably lead to a larger problem-solving project, that combines skills from a combination of prior Python activities. We periodically are visited by high school teachers in the area, so hopefully this will give them a head start while giving the students more to draw on and further empower them to stretch themselves at an earlier stage. We've got a few ideas - so let's see how things go this year ;) Making Things Work Better This semester's Python group has been the best so far; in that the transition has been the smoothest and the culture we've developed is quite hungry and hard-working. We did make a few changes to achieve this though. Some of the main issues we previously encountered when moving to Python included: Moving into Python was difficult for those that hadn't progressed far enough in Scratch, leaving those students frustrated and without the focus to progress easily There wasn't enough time allocated to get Scratch 1 and 2 done (Scratch2 being a pre-requisite for the Python modules) Lack of structure and setting measurable expectations/objectives with regular milestones Issues with inconsistent or non-working Python environments and editors on laptops Distractions with too many short-term 'fun' activities that didn't necessiarly contribute to helping students actually learn coding concepts that would help them to code fluently enough to go past a certain point with implementing their ideas Limited time spent by teachers and volunteers to go through Code Club Python modules, resulting in slow progress when first starting Python, combined with frustrations from having no Trinket accounts to save their work Not having enough guidance on some activities, resulting in students not getting the full potential of learning from some activties Issues getting to Code Club curriculum content in pdf files The initiatives we implemented this year to prevent these issues are as follows: Present clear expectations and objectives for Code Club, especially in terms of 'leveling up' and working through activities at a reasonable pace (each Code Club project is designed to take around an hour to complete) Help students to track their own progress, and try to get them help as soon as possible, and make sure the type of help we give empowers them to replicate the troubleshooting processes themselves Have a process for dealing with password resets immediately so that all students can save their projects as they go Stronger communications with volunteers, with some volunteers going through Python exercises and other activities themselves - while also being open to support volunteers with knowledge-sharing and access to learning material if they want it Accelerating the progress of students realistically, by starting at Scratch2 and supplementing the initial assumptions about prior familiarity with the Scratch interface Show students how to access Code Club curriculum content in a browser, so they know they can access it themselves, and outside of Code Club ie at home Use Trinket to begin with, so that students can focus on learning concepts before moving on to other Python environments Acknowledge when students are ready to progress to more challenging activities and map these to physical spaces to allow some collaboration Make sure that everyone is progressing at whatever level they want to, and assist with continuity and completion of projects So How are We Going so Far? So far, it's been awesome. We now have a group that are on to their 3rd Code Club Python activity this semester, with some already up to Python2 due to working on Python1 last year and in their spare time. We've also referenced the Code Club skills matrices, when students ask which activity to do next, so they can see why they're selecting a specific activity in terms of concepts they'll learn. This adds a bigger picture to their view of what they're doing and how it contributes to end goals. There's definitely a keen focus and a great buzz around the students working through the Code Club Python activities, and their progress is roughly 1 and a half activities per Code Club session. Since we know what Scratch projects they've done, it's easier to explain Python concepts in terms of these, and find useful analogies in Scratch, or introduce new terminology or rules. The students are getting heaps more out of the process and that makes them keen to progress. They're also excited to get started and at the end it's been obvious that they feel a sense of accomplishment with lots of hands raised in triumph or simply the hiss of \"YESSSS!!!\" when something finally works. We've had some productive discussions about concepts such as \"don't repeat yourself\" (DRY), creating objects that allow methods to be performed on them, and modelling things in code. I'm really excited to see how this group goes and last week most of the students mentioned that they'd be doing more at home too! Even though students have said this in the past but somehow been distracted and not able to, it seems that this group are more confident and driven that I am excited to see how they've progressed by next week! It's Easier to See What's Possible Due to the momentum, focus, and general excitement in the Python group, the students are starting to see the potential of what they can achieve. We briefly mentioned that we'll be able to get robots running with Python this week, and the understanding of how that could happen was definitely at a deeper level than we've seen previously. In the past, there was often a disconnect between what we could do and how we could do it. Now it seems that there's quite some vision and excitement towards how we can do things. The feedback we've received from parents has generally been positive, however I'm looking forward to when we can make something significant that the non-coding school population will sit up and be impressed by. Here's one of the Code Club Python2 activities below:","tags":"python","title":"Term 3 2017 First Python Group, 2nd Semester"},{"url":"/third-term-2017-begins.html","text":"This semester, we swapped over to the second of our Code Club groups. Although this group has older students, there's also some younger kids that missed out last semester, with a good spread of newcomers. Since each group has less time with our Code Club being split into two shorter semesters this year, and we have more students learning to code in the curriculum now, we decided to start with Code Club's slightly more advanced Scratch2 module this time. It turns out Scratch2 isn't really that hard and we just had to fill in assumed familiarity gaps with the Scratch interface. Given that most of the kids have tablets, or have played video games of some sort, figuring out how to click blocks together and make sense of how they work together isn't so much of a stretch. It's been encouraging to see the younger kids staying engaged with the more challenging projects. One of the reasons for starting at Scratch2 was to introduce students to a wider range of concepts that are easily transferable to Python and other languages. You can see the Scratch2 skills map here: https://codeclubprojects.org/en-GB/curriculum/#scratch2 Changes this year As a re-cap on a previous post , some of the issues we encountered last year were: Tablet games becoming distracting when kids were idle while waiting; Students taking shortcuts by remixing more complicated games and missing out on learning basic concepts we found they needed later on; Eager students stuck on a waiting list while some students in Code Club weren't focussed; A lack of continuity that resulted in lots of unfinished activities at the end of the year, and limited goals leading to less satisfaction; and Wasted time due to forgotten passwords, accounts, and hardware/software issues with the environment. After some discussion with our Code Club teacher, other volunteers, and the school's IT staff, we made the following changes this year: We introduced a 3-strike rule, to create an understanding of an expected standard of behaviour and to help realise that Code Club is an opportunity to be valued; With almost 100 students applying for Code Club, we decided on two semesters, after previous attempts of a larger group that still left some students discouraged last year; I wrote a handout for our volunteers this year, so everyone was clear on what was and wasn't acceptable in Code Club, and set students expectations appropriately, with clearer goals for 'leveling up' and working hard to be able to do more interesting and challenging activities; Having students keep track of their progress in myEd, so we know who may need more help or to move onto advanced workshops or activities, eg robots and makey makeys; We leveraged emails that were accessible to allow quick password resets, and rather than just using guest accounts we deal with forgotten usernames and passwords immediately, and in batches if required; and Worked out reasonable lead times for any requests on hardware/software installations with IT support, as well as bringing them into our collaboration chats, so that we have continuous and specific communications to reduce time wastage. The password reset initiative and IT support communications actually didn't happen until this semester but we've already seen some improvements with better progress and continuity for students - the end result being that they're learning more and enjoying doing it. Moonhack 2017 The second Moonhack event came along after two weeks of Scratch 2, which gave us a couple of weeks to help students with prepare for their submissions during Code Club sessions. With some late notice, we also managed to have some of our students at the local Moonhack event, which was an exciting opportunity and another good opportunity to present in front of others, and talk about what they'd achieved. Coupled with some travel I had to do, this gave us some time to develop some ideas for workshops and progressively advanced activities. Unfortunately, this was the second time I was overseas for Moonhack night, but a little easier as I'd passed the 'Torch' to Tom at Code Club Aotearoa; who did a fantastic job of developing multiple levels of Moonhack projects this year. It was great to be involved in such a huge event again, and to see over 25,000 kids participating from around the world! First School Alumni Volunteer Says Goodbye for a Job Last week we said goodbye to a volunteer that was also a school alumni, and had been with us since our very first year starting Code Club a few years back. He really encouraged our current alumni volunteers, explaining how Code Club was a great way to get experience to prepare for part time jobs when they are older. It's also positive to see someone go from primary school into volunteering, and then have a real advantage to get a part time job in high school. It was easy for us to write him an impressive reference based on his proactive approach, ideas and enthusiasm. Although we have parent volunteers come and go, it is inspiring to see a student on the journey toward his first job. He even put forward a friend, with a younger brother in Code Club, to take his place! Students Ready and Moving on to Python! So this semester is going well so far. Apart from the Scratch2 students, we also have been selecting students to have a go at Dash robots, and were able to select those with the most Scratch2 progress to start on Python activities. One student had already gone through some Python with his BBC micro:bits that he talked about at the Future Schools exhibition, after this tutorial . Another had already completed all of Python1. The next post will go into more detail about our improved Python progress this semester. Draw Your Own Adventure Also - check out one of our Code Club student's new games, Draw Your Own Adventure below; it combines a platformer with the drawing your own levels, using some concepts from the Code Club paintbox activity.","tags":"codeclub","title":"Third Term 2017 begins"},{"url":"/elegant-creativity-with-makey-makey-and-scratch.html","text":"Lately a few of us having been running some workshops with Scratch and the Makey Makey. Once the grade 3 and 4 students had finished the Code Club Scratch 1 and 2 modules, and some additional projects, we moved them onto the Makey Makey workshop. The Makey Makey is a device that allows objects to be connected and used as switches, which the computer interprets as various keys on a keyboard or mouse. As a bit of background, one of the students had been progressing through the NoStarch Press Scratch Programming Playground by Al Sweigart, and they had all seen a joystick that one of the older students had put together after seeing this at the Future Schools exhibition. Something I try to do once we move onto designing projects, is to get students to communicate their idea and limit the complexity in their first version.Initially, attempts at inspiring seemed to all end in variations of \"we can make a controller or joystick\". I suggested we do a whack-a-mole variation, which one of the two initial groups decided to take on. Another group decided to do a polar bear that was controlled with some pads connected to the Makey Makey. The students were eager to get started and some of the advice I gave them, was to keep it simple and just get the basic idea working first. After a quick explanation of the Makey Makey and showing how to make some switches and other examples, it became obvious that breaking out of the game controller paradigm was going to be tough. On top of that, students were quite eager to over-engineer games with lots of ideas and sprites, and this soon became overwhelming. Spend More Time Planning/Designing and Less Time Coding After some troubleshooting and revising ideas, it soon became evident that more thought was required before diving into code and adding lots of sprites. This is really where the real learning begins, we have the students articulate their ideas, and what is and isn't working. I'll often follow this up by asking some key questions, such as \"what section of the code controls this?\". If there's some confusion, we'll save a copy of the project, and go back to the initial idea. Usually this also involves setting setting some goals and discussing what the main 'engine' of the project is. Once these are all clearly defined, it's really good to take time to draw out the proposed project and understand how our code will work, using plain language rather than actual code. So the steps at this point are: Decide on an idea Communicate the idea on a whiteboard or paper Set achievable goals by limiting the first version to just the basics Have a clear idea of how the code will be designed Test often while building It helps to talk about the most fundamental functions that the code needs to perform. Once this is established and agreed, things really progress quickly from this point. We got a few projects complete, and that felt like somewhat of an acheivement for a couple of groups. However, I couldn't help but feel that I hadn't quite been successfully in really inspiring our students, or getting to that lightbulb moment where they saw how easily they could create awesome things with the Makey Makey. The Skill of Creating an Innovative yet Elegant Solution Sometimes it's just easy to drop into what we know, especially when we start coding up something before it's entirely clear what the overall design and idea is. Breaking out of of these habits seems to happen when we take some time to discuss what we want to create, without immediately writing code. When we talked about a problem, and then solved this using skills learned during Code Club, it somehow helped us to apply the code to the problem, rather than dropping into the usual ideas. Often, it's just easy to be bound to ideas around the code we know. Keeping things simple at first, gave us a chance to create code that was easier to read, and easier to add to. It also made things clearer in our minds, allowing us to see things from a higher level, and create more elegant code i.e. code that was both efficient and readable. This may not happen initially, but sometimes we need to create something unwieldy, so that we can start again and improve.","tags":"scratch","title":"Elegant Creativity with Makey Makey and Scratch"},{"url":"/weaning-off-scratch.html","text":"Just Coding vs. Improving and Learning New Things The more years our school's Code Club runs, the more I realise how well-designed the Code Club Australia curriculum is. I've previously mentioned that we started our Code Club just picking out what we thought would be most fun for the kids. Now I've realised that it's probably time to stop apologising for teaching coding, and muster a degree of boldness and work hard to show kids what they can do with it. In order for them to be able to do things with code, they just need to get through the projects; if they get too bogged-down, they may never see the potential or learn the lessons gained from trying to make something, and make that something work. Projects are Designed to Take Under an Hour to Complete Recently, one of our volunteers reminded me of something I'd forgotten: The Code Club projects are designed to be completed in under an hour, and for that reason, they're really not that difficult. So...then, why is it that sometimes we find kids that should have completed Scratch 1 and 2, but have only just done a few projects? In a word, passwords. Students' school passwords are normally able to be reset by teachers, so parents sometimes won't recognise this as their responsibility, since our Code Club is at a school. However, talking with other Code Club volunteers and teachers, this seems to be a fairly common problem. Since getting bogged down on one project too long can discourage some kids, it's important to identify operational issues and get these fixed in a practical way. Once you have a process to fix an operational issue, it helps to make a 'cheat sheet' for volunteers and teachers. That way, it's essentially a case of, \"if this happens..do this\", and we're all sorted ;). Of course there's always initially some degree of student learning required to understand various interfaces used, and this usually sorts itself out quite quickly. Since we have previously taken students through a number of projects that involve the use of other operating systems and interfaces, like Linux on the Raspberry Pi computer , it's handy to maintain a degree of adaptability. Scratch Teacher Accounts For Central Management of Student Accounts One solution, suggested at a meetup, is to use a Scratch teacher account . This means the teacher creates the Scratch accounts, and can reset passwords as required. However, the problem with this, is that after Code Club, the accounts aren't accessible to the kids, and this means they aren't empowered to, or don't feel like they actually own their Scratch account. A lot of our Code Club parents ask me about continuing on with coding and creating, after Code Club. Also, our Code Club doesn't run outside of school terms. So we looked for a way to combine the central management of Scratch teacher accounts, that doesn't result in disabling of Scratch accounts after Code Club. Something that is important, when rotating teachers, and with changes to our volunteer availablity from year to year, is redundancy: being able to reset accounts without exposing personal information accessible from an individual's email account. A Compromise That Lets Kids Express Some Ownership Something that may be a better solution, is to have regular accounts created, and then use a common email address so that these can be reset during Code Club, as required. The accounts are still accessible outside of Code Club times, but during Code Club times at least one volunteer, or teacher can reset these. Once Code Club is done for the year, access is then transferred back to the parents so that the account still lives, and the kids realise they can still keep coding. Get Those Skills Why do we need to get through Scratch 1 and 2? Sometimes it can seem that when kids are coding, they're always learning. But it's easy to only stick to what they know and become restricted with what can be created. Take a look at the concepts taught by each Code Club Scratch 1 project here and Scratch project 2 here . The concepts taught vary across the projects, meaning that kids looking to progress through to Python really need to have done Scratch 1 and 2, to understand initial concepts. The Australian curriculum now includes programming (coding) components. From the perspective of our Code Club, this seems to be a good thing, as it will allow us to do more for the year levels that we provide our Code Club for. I'm excited about the projects we'll be able to challenge ourselves with over the next few years. For teachers, it's worth considering using the overlap of the Australian curriclum with the Code Club Australia curriculum, shown here . It looks like an easy way to complement some of the teacher material with the ready-made projects that will fit into a class. It's Still About the Journey To get the most out of Code Club, kids need to deal with many challenges and often end up needing to troubleshoot if they've got ahead of themselves. It's this very process of challenge and resolution in order to reach a goal, that helps kids learn effectively, from coding. Sometimes this can involve some failures and letting our code become overwhelming, so that we can re-design (re-factor) our code to be easier to read and debug. A more elegant solution to a problem is much easier to consider mentally, and so allows for more complex problems to be modelled and solved. Useful ways of creating these elegant solutions for our own projects can include: using a whiteboard or paper to draw a visual representation of a problem and solution writing pseudo code i.e. a quick and readable descriptions rather than actual specific programming language learning how to use a wider variety of data structures and concepts, that help us model common solutions more easily Push Ourselves A Bit and Learn Cool Stuff So, rather than just 'doing something' when they are at Code Club, to get the most benefit, kids can progress through the Code Club curriculum. Part of this requires maintaining continuity both with volunteers, teachers, and working to get through the projects, and helping them to complete projects. It's really great to be able to point out how far the kids have come with their coding, so they feel a real sense of achievement at the end of the year. Although there's great value in letting kids create freely, we've found that there's still a certain amount of guidance required so that they'll have the skills they need to create. Having said this, it can often take getting totally confused by writing an impossibly complex solution, to appreciate the more straightforward and elegant approach.","tags":"scratch","title":"Weaning off Scratch"},{"url":"/first-term-2017-fantastic-volunteers.html","text":"This year brought a few changes to how we're running our local Code Club. In addition to having our largest group yet, this year we have the most volunteers we've ever had. With these challenges, we seem to manage to stay aware of individual skill levels in students, and seen volunteers grow their skills as well. I thought it might be useful to sit down to reflect on how things are going, and try and share some insights into things that seem to work for us, and talk about some of our experiences and issues we deal with. Broader Demand for Coding Skills In previous years, we've had smaller groups, but these would generate more interest during the year, resulting in a waiting list due to the limited computers and volunteers we had available. This year, there was an increased demand at the start of the year, with parents asking about Code Club literally as soon as school started. Since our club is school-based, we only run during the school term. We also added another two year levels midway through last year, at that time making the decision to run the sessions concurrently. Due to larger numbers this year, we've opted to cater for years 3/4 and 4/5 in separate semesters. This decreases the ration of students to teacher/volunteer, allowing us to reduce the time students have to wait for help. Awesome Volunteers Initally, there were three of us running a Code Club, scrambling around to answer questions and demoing projects, to keep the students excited about coding. Fast-forward a few years later, and we have a reasonable group of parent volunteers, and past students volunteering from multiple previous Code Club groups. Now, it seems we have more past student volunteers than parents! One of the great things I've observed with our Code Club alumni volunteers, is the way they just adapt and get things working. After some thought, we attributed this to our previous Code Club years, where we worked hard on instilling a degree of resilence where we would push forward, to achieve as much as we could while figuring out how things worked. And, coupling greater numbers of volunteers with dividing the larger group into two, this smaller student to volunteer ratio also means that no students are left idle during Code Club sessions. The rate of progress this year is increased, and that theoretically means students can achieve more in a shorter amount of time. A side-effect of this is that there's less time to get bogged down on a project, and potentially more excitement generated. Issues we're Working On As almost every Code Club volunteer I talk to will attest to, forgotten passwords are probably the most common issue that adds extra time to each session. We usually have workarounds, such as shared accounts, but these often require some extra steps e.g. copying a project file to somewhere that is accessible for next time, downloading projects rather than having them automatically save, and doing this before students are collected for their next extra-curricular activity. One initiative one of our Code Club teachers started last year, is to rotate other teachers in the school, through Code Club: So they either come along and assist, or take turns as the main teacher representative at the Code Club. As more teachers in the school understand more about how Code Club works, they can incorporate some of this knowledge into their day-to-day content, as well as teaching some awesome teacher skill to volunteers, or even helping reduce the 'forgotten password' issues. Volunteers and teachers new to Code Club will sometimes cite minor issues as problems, such as lack of familiarity with an operating system interface, or hardware. However, as some of our seasoned returning Code Club alumni quickly demonstrate, these are really minor, since young students will figure these out within a couple of weeks. In contrast, I've found this environmental agiity to be valuable in later projects, when more advanced students will venture into robotics and create web applications on small Raspberry Pi computers. A useful by-product of our sessions, is that students become more aware of privacy and security principles and can start to apply these to their everyday life decisions. For instance, computational thinking can often help students consider logic that affects accessibility and access privileges, both in computer systems but more broadly in terms of which and what types of information they share with others. This includes considering whether another individual requires specific information, how much information the require, and how that information could potentially be misused. This brings me to a real issue that has plagued some of our workshops has been recent changes to school laptops that prevent compatibility with other networks. Although previously, the IT folk at the school have been helpful, we still struggle to get notified of changes that affect our sessions, or restrict our ability to set up specific software or hardware. Although we have the skills to sort things out ourselves, when Code Club starts, time is critical, and something stalling can mean a wasted weekly session, and is frustrating and distrating for kids. The real answer has been to find a time to sit down next to an IT guy at the school, and just get things sorted out. Other than that, it's often a matter of making sure we depend on unknown factors as little as possible. Although this has really only affected our more advanced workshops and activities, as more students progress faster and faster, I could see this having a larger impact. Ideally, a small pool of computers that we control, or just finding some accessories for our Raspberry Pis may be a good start. Interestingly, since we're seeing much more progress in our students this term, this may need to be sorted out sooner than we expect! Tracking Individual Skill Levels and Interests As Code Clubs progress, the gap between least skilled and most skilled students starts to increase. At the same time, students also discover areas that they are keen to focus on, further diversifying the types of activities we have running. Last year, we started to introduce the myEd application, as a way for students to track their progress; and this term we had the right student to volunteer/teacher ratio to ensure that students recorded their completed projects. In one of our recent sessions, there was lots of enthusiasm about more exciting projects in the future; and it'll be easier to get these going because we know exactly whom to call in for specific project groups, based on the work they've done. Code Club Australia had a great curriculum base to get started and seeing students work through it faster than ever before, is very encouraging. So, with more advanced workshops running, it's great to have volunteers that are equally as eager to build their skills and play with robots or (attempt to) shadow other more experienced volunteers, while they rush from student to student during each session. For some students that are after a deeper understanding of some principles, I've also found that referring them to a list of recommended books can be useful to accomodate those students that enjoy working on more advanced content at home. Other Code Clubs I've talked to have also been quite successful in introducing pair programming to allow students to solve problems and review each other's code. Developing Volunteer Skills One major benefit of training up volunteers, is redundancy. It means that Code Club will still run when a particular volunteer is away, and that students will stay on track with what they are working on, rather than ending up with a bunch of abandoned projects. Lately, we've placed a bit more focus on completing projects that we start, because this helps to reinforce the idea that our projects are alive even when Code Club isn't happening due to a long weekend, or school activity. Communicating to as many volunteers as possible can be hard. Earlier on, I would try and email each volunteer after Code Club sessions, and see how they were going, or what they were getting stuck on. These days, we'll get onto a collaboration platform where I can post files and URLs for userful learning resources. The idea behind this is to keep the excitement going with our volunteers and teachers. It also pays to try and tee up a time with teachers at least once a month to either: play with tech/electronics/code catch up and work on any issues or upcoming events drink coffee and discuss face-to-face, how things are going It can be hard to find the time to catch up, but it's usually time well spent if I can get it. Sometimes meetups can be useful to catch up with teachers and volunteers from other school. If you're thinking of volunteering, or starting your own Code Club or similar, you can't go wrong turning up to a relevant meetup. It's great to compare notes and give each other ideas and tips. Very often, I come across other Code Clubs that have fallen into situations that we haven't, and can offer friendly insights into how what approaches to take. Other times I find myself travelling or just talking to other Code Club people online. Having the Internet really has advantages at times ;). As students become more advanced at coding, the demand for challenging activities may require more skills from teachers/volunteers. Some of the best ways to help volunteers and teachers skill up quicker, is to run training workshops. A good example could be a robot workshop. Other times, we just invite teachers to our Code Club sessions. I stil marvel at how they will quickly drop straight into teaching mode with only a little coding experience, and do such an awesome job. Inviting other teachers to Code Club sessions really helps to let other teachers know that coding isn't really that scary, and give them exposure to what their students might be interested in outside of their normally classes. If you're a teacher or volunteer, Code Club also run training that you can attend - I have even heard of a Code Club set up just for adults wanting to learn to code! Going Further With every year that we run our Code Club, it seems that students are learning things faster, and progressing further during the given time. Last year we were able to run two different robot workshops in parallel and in addition to the standard Code Club activities. There were plenty of distractions that may or may not be relevant, including: - 3D design and printing - Spheros - Drones Ultimately, these should all be able to integrate with the result being much more of a maker workshop where students are equipped with the basic skills to code and find their way around various machinery and eletronics, to create whatever they can dream up. We're seeing more ownership of coding projects, where projects are initiated and run by students, that continue with their own energy. I'll often tell our students that we can go as far and as fast as they like, they just need to put in the effort. These days, we're getting more and more efficient, so maybe we'll find ourselves further than we expected ;).","tags":"codeclub","title":"First Term 2017 - Fantastic Volunteers!"},{"url":"/microbit-2-way-radio-example-adding-audio-alerts.html","text":"This post adds onto the previous tutorial , so if you haven't already, you shoud go have a look at that first. Adding sound alerts If you've got a speaker connected to your Micro:bit, or have the MI:Power battery add-on that includes a speaker, it's easy to add a sound to alert us of sending or receiving a new emoticon. In the original code, we had an if statement that would display the TARGET image, pause, and then display whatever image the incoming index pointed to: # If there's incoming data, show the emoticon that's been received if incoming : display . show ( Image . TARGET ) sleep ( 500 ) display . show ( images [ int ( incoming )]) sleep ( 2000 ) Let's change that to play a couple of short notes, when we detect an incoming radio message. First we'll have to import the music functions for the Micro:bit. So, just after the existing import radio statement, at the top of the code, add the following import: import music Now look for the if incoming: code and find the following two lines: display . show ( Image . TARGET ) sleep ( 500 ) To play two notes instead of displaying the target and waiting, modify the code as follows: if incoming : music . play ([ \"C4:2\" , \"D4:5\" ]) #display.show(incoming) display . show ( images [ int ( incoming )]) sleep ( Save the Python code and send it to the Micro:bit. When it receives a message (emoticon), you'll hear it play the two notes and immediately display the emoticon sent. The information for the notes are simply stored in a dictionary i.e. a list of pairs, known as tuples, in the format NOTE:DURATION. Because it's a dictionary, we put our NOTE:DURATION pairs inside square brackets, separated by commas. Additionally, if you'd like to play some notes when sending an emoticon, you can find the line that checks for both buttons pressed: if button_a . is_pressed () and button_b . is_pressed (): Now place a similar music.play() line after it. To make sure it's within the if statement, remember to indent it. Now when you write this code to the Micro:bit, you'll have sound alerts when you send and receive emoticons. If those tones aren't to your liking, you can also use speech. For more information on creating sound on the Micro:bit you can find the documentation here.","tags":"python","title":"Micro:bit 2-way radio example - adding audio alerts"},{"url":"/microbit-2-way-radio-example.html","text":"Lately I've been playing with the BBC micro:bit . Having micro-Python on this cool device that boasts accelerometer, magenometer, bluetooth low energe (BLE), temperature sensors and a 25 LED matrix, and Integrated Circuit (I2C) interface makes it a easy entry point for kids to build and code on. So I was thinking it might be fun to send emoticons between two micro:bits, so here's a micro-Python script I put together to broadcast emoticons to other micro:bits running the same script. You'll need at least two micro:bits to send and receive emoticons, or if you have one micro:bit you can just use the A and B buttons to display different emoticons. For some reason, it's rather entertaining selecting emoticons to send back and forth through the air! Controls Once the script is running on your micro:bit, it uses the following controls: Button A: go to the previous emoticon Button B: go to the next emoticon Button A and B together: send the currently showing emoticon to other micro:bits running the script nearby When you send an emoticon, the micro:bit will display 'sending...' and the receiving micro:bit will show a diamond, then display the received emoticon for 2 seconds. For this example, I've tried to stick to a fairly simple if .. elif decision-making structure, using only the basics required to make this work. Let's get coding! Ok, so let's get started... First, open whatever editor you are using to write your code. Since we are using micro-Python, you can use: the micro:bit online Python editor ; the Mu editor ; or the micro:bit plugin for Chrome , or any text editor with the command-line uflash tool . In our editor let's begin writing the script and import the required micro:bit and radio modules. Add the following to a new file in your editor. from microbit import * import radio Put the emoticons into a dictionary The micro:bit's image class has built-in images that we can associate with numerical keys in a dictionary. We'll create a dictionary called images . images = { 1 : Image . HEART , 2 : Image . HEART_SMALL , 3 : Image . HAPPY , 4 : Image . SAD , 5 : Image . SURPRISED , 6 : Image . ANGRY , 7 : Image . ASLEEP , 8 : Image . BUTTERFLY , 9 : Image . DIAMOND , 10 : Image . CONFUSED , 11 : Image . COW , 12 : Image . PACMAN } Create an index We'll use a variable to keep track of which emoticon image we have 'selected' and set this to 1. index_num = 1 Configure and enable the radio To set up the radio functionality we need to set the radio channel to 10 and turn the radio on. radio . config ( channel = 10 ) radio . on () Main loop and receive radio data Now we come to the main loop that keeps repeating while the script is running. Received radio communications will be captured in the incoming variable. To keep things simple I haven't done any validation on the incoming radio data. I'm just pointing out that you should be aware that this is reading unchecked radio data into a variable, and a rogue radio transmission could potentially exploit this. However, for the sake of this exercise, I'll assume you're well away from such transmissions and possibly in a Faraday cage or bunker of your choice ;) while True : incoming = radio . receive () Do things when events occur The rest of the script is essentially saying \"if something happens, do this\" followed by displaying the select image and a delay. Without the delay, the micro:bit was checking the buttons too often, making it hard to read a single press. If you find that you have to hold down the buttons too long, you can reduce the sleep() delay value to make it a little quicker. If it flickers between different images when you press buttons, increase the delay. Check for single button presses, and increase or decrease the index_num value. Since the if statements are inside the while loop, we need to make sure they are indented (moved right) so they line up with the incoming line above. if button_b . is_pressed (): index_num += 1 if button_a . is_pressed (): index_num -= 1 Send the current index_num value, and display 'sending...', if button A and B are pressed together. The str() function converts the number into a character to send. We could really send raw bytes here but I'm trying to keep it simple for now. if button_a . is_pressed () and button_b . is_pressed (): radio . send ( str ( index_num )) display . show ( 'sending...' ) If we have an incoming radio broadcast, display the TARGET image, wait for half a second, then convert the incoming data back to a number. if incoming : display . show ( Image . TARGET ) sleep ( 500 ) display . show ( images [ int ( incoming )]) sleep ( 2000 ) Make sure that index_num stays within the key values for the images dictionary. In this case, if index_num is too high, we set it back to the first image, and if it gets too low, we set it to the highest image. if index_num > 12 : index_num = 1 elif index_num < 1 : index_num = 12 Finally, display the currently selected image from images and wait for half a second. display . show ( images [ index_num ]) sleep ( 500 ) The entire script So the whole script should look like (I've added comments so don't worry about anything starting with # : # A micro:bit emoticon chat script # By @justaboutfine from microbit import * import radio # Create a dictonary of our emoticon images images = { 1 : Image . HEART , 2 : Image . HEART_SMALL , 3 : Image . HAPPY , 4 : Image . SAD , 5 : Image . SURPRISED , 6 : Image . ANGRY , 7 : Image . ASLEEP , 8 : Image . BUTTERFLY , 9 : Image . DIAMOND , 10 : Image . CONFUSED , 11 : Image . COW , 12 : Image . PACMAN } index_num = 1 # Set the radio channel to 10 radio . config ( channel = 10 ) radio . on () while True : # Capture received radio data incoming = radio . receive () if button_b . is_pressed (): index_num += 1 if button_a . is_pressed (): index_num -= 1 # Send the current emoticon if both buttons pressed together if button_a . is_pressed () and button_b . is_pressed (): radio . send ( str ( index_num )) display . show ( 'sending...' ) # If there's incoming data, show the emoticon that's been received if incoming : display . show ( Image . TARGET ) sleep ( 500 ) display . show ( images [ int ( incoming )]) sleep ( 2000 ) # Keep the index_num within the valid dictionary key range if index_num > 12 : index_num = 1 elif index_num < 1 : index_num = 12 # Show the current image display . show ( images [ index_num ]) sleep ( 500 ) Now flash this to two or more micro:bits and you should be able to use the controls listed above, to select and send emoticons from one micro:bit to another. On the Mu editor and Chrome plugin, you can just click on 'flash', with other editors you can compile your project to a .hex file and drag or copy it to your micro:bit once it is plugged in. Unfortunately, flashing via BLE doesn't work if you're using Python. Also, using radio in other languages can interfere with BLE functionality. If you have a group, you can send to more than one micro:bit. You can set separate radio channels on different pairs of micro:bits to have separate teams or emoticon conversations. From here, you could even use this to send text messages to one another as well, or use speech() to 'say' a message on another micro:bit equipped with a speaker. The possibilities are fairly broad, so go and experiment!","tags":"python","title":"Micro:bit 2-way radio example"},{"url":"/after-code-club.html","text":"Code Club parents are great! While chatting to parents of previous Code Club students and those having had their last Code Club, it was interesting to hear what previous students were up to, what those leaving were looking towards, and glean some insight into ways we could improve. Although we've had a great year overall, it's always good to get feedback and an end-of-year dinner was an opportunity to introduce parents to our other volunteers, and give credit for an exceptional effort this year, and really added so much to a larger code club. It's also a rare chance when students, families, teachers, and volunteers can mix in a relaxed atmosphere. It's one of those times where the clock isn't ticking during a code club session and we aren't all rushing around. Sometimes you may even end up with new volunteers, sponsors, or instroductions to groups with similar interests. A wide range of interests outside of Code Club There was some great positive conversations around the various activities we went through, and interesting insights into students' priorities and time management around their own coding endeavours over the school year. It's great to see that most of our students were able to juggle other sporting or arts-based activities with code club, so that we had a broad range of influences in projects. Much of the variety in students attending code club seems to have come through exposure in assemblies and our other activities, which would also explain the large waiting list we have. Code Club is not always limited to coding Although it wasn't easy between all the school activities that are on, we did manage to get a few excusions and special visits happening this year. As a general rule, the odd pizza night does go down quite well at a code club. Since we run ours after school hours, we usually do a short break before commencing, however after a full day at school, sometimes things can lose focus a little, so the occaisional well-timed treat or other related activity can really contribute to overall morale. Too much of this though, can also make it a little more difficult to keep a consistent focus during projects. We also gave a little more freedom this year and found a point where we needed to reel it in, to keep people progressing with their creative coding skills. Among some of the other activities we participated in were: Scratch video game writing competion, where we had two students win prizes Presenting at an inter-school conference A variety of workshops that involved robotics, using both visual drag-n-drop programming (Scratch) and text-based (Python) incorporating motors and sensors to navigate autonomously Web applications, with more text-based programming Other Sphero/Drone programming with Tickle, and 3d design using Tinkercad Linux operating systems on the Raspberry Pi Group activities where students were in teams Designing games from a basic sketched idea on paper, to creating a working prototype to specific set milestones Regular mentions and demonstrations in school assemblies Soft skills + tech skills = win Another area that received some thumbs up was that a number of our students ended up being chosen to present what they learned in workshops and other code club topics thoughout the year. It's great to learn some programming skills, but being able to communicate these to an outsider, or non-technical audience is definitely an important skill for future jobs. The other area where some of these soft skills did also emerge was in our group activities and general mentoring of the newer students from the more advanced students. And speaking of soft skills did I mention that I learn tons about teaching kids from the teachers at our school too? Although it's really difficult at times combining busy school timetables and work schedules, it is very worthwhile to take the time to meet with primary school teachers (especially if your Code Club is at a school) to go over activities, ideas, and ways of delivering things effectively. It's not uncommon for me to have racked my brains coming up with a rather average way to achieve something, only to get a much easier method by talking to a full-time teacher. And then there's all the really difficult teacher skills that just magically sort out whatever might be tripping up the otherwise smooth learning that would be happening in your Code Club. In Code Clubs where parents may not be able to available, it's often the teachers that can give you background into other environmental factors that may be involved. Post Code Club insights Since some of the students in our Code Club have alumni siblings, it is interesting to hear from parents what they are doing now. A number of parents enquired about how their kids could continue with technical pursuits after grade 6 (Australia). Although some have continued to develop their skills, some had not, with reasons being a lack of awareness or knowledge about suitable activities by parents. Part of continuing on with these skills is motivation and inspiration, that may have originally come through the regular Code Club sessions. A good suggestion that came out of these discussions was to have a leaflet sent out to parents, providing them with the following: Video podcasts with coding projects, and interesting hardware to play with Recommended books with sufficiently challengning content to carry on the journey that started in Code Club Where to find fun kits and online instructions for projects Suitable game design frameworks and related online tutorials and books Some of these are useful for alterntive holiday projects, or just an ongoing learning journey. A Code the Future teacher made a good comment earlier this year: saying that between all the main groups teaching these skills, there's a whole lot of kids getting great opportunities to gain useful skills. What we're talking about here isn't just about maintaining an application, or working in IT support roles, but the ability to conceive great ideas and be able to prototype and commuicate these to solve problems and create new products and services. One only has to sit down with a modern developer to know that most aren't devoid of ideas or needing inspiration from an 'ideas' person, but currently implement their ideas in their own startups and open source projects. Marketing and communications does play a huge role in startups, and this is where the presenting, or pitching ideas to audiences and prospective end-users comes in handy. Having said this, some of the limiting factors we encounter in Code Club relate to areas not yet covered in the school curriculum e.g. more advanced calculus, physics, etc. And this is where high school teachers can enable exciting projects that are generally out of scope in our Code Club. Passing the torch to high school teachers or maker groups On our last Code Club for the year, we had a visit from a group of high school teachers at a nearby school. It was great to chat and discuss various challenges and swap experiences. If you're running a Code Club, I'd really encourage you to reach out to those that you will be passing the torch to, as can facilitate knowing what to prepare students for, but also to have a communication channel to transfer what has already been covered and compare expectations. We're looking forward to seeing what Code Club students go on to achieve, and what might be in store for them. We'll definitely be looking to keep in touch and see how we can help each other as our technology programs progress together. Keeping it challenging and avoiding burnout The progression from the initial excitement about joining a Code Club, through various challenges and subsquent skill acquisition can also be precarious, since unlike a traditional classroom, we ultimately end up with a large variety of skill levels and focusses in our students. If something is too challenging or a student is not ready, they can become frustrated or get burnt out. I talked about tracking progress in a previous post, and talking to parents can also give insight into other factors to take into account with home life and parents' attitudes, skill levels, or priorities. For example, a student with many siblings may have difficulty spending time outside of Code Club and will want to capitalise on the time during Code Club sessions, whereas those with ready access to resources and hardware through parents and their home environments, may be less concerned with progressing during Code Club sessions. If your Code Club is run at a school, some insight may come through teachers, although this will usually be general recommendations based on their knowledge of a student in order to keep up good ethical standards regarding privacy. For this reason, I'll normally leave this as something of a black box, and refer to teachers to determine which students will do well with a given project. In other situations, e.g. at a library, it might just come down to talking to parents about various challenges and working with those. In other posts I've also mentioned that we try to have set areas physically allocated for each activity, to allow students to work with other like-minded peers, and have a clear idea of numbers of students working on activities. You can also match volunteer skill sets with specific activies or group sizes. Of course some students just find their niche and excel in that area e.g. writing games or specific mobile apps. And that's ok, especially if you realise this and help them when they get stuck or need to bridge knowledge gaps in that area. I find this also helps me push myself to constantly keep learning in those areas too. By paying attention to some of these should help you get a better idea of your students' interests and progress, while giving important insight into setting the right difficulty in activities to challenge yet progress each student effectively. This helps when parents ask about holiday resources or whhen it's time to tag team high school teachers or maker groups that may inherit Code Club alumni.","tags":"codeclub","title":"After Code Club"},{"url":"/showing-progress.html","text":"A number people from both established Code Clubs, and those interested in starting one, have asked me about strategies to engage active support from parents and IT teachers. Recently we had a chance to sit down and look back over some of our experiences running Code Club, and came up with some ideas about some things that worked for us. Comparing before and after At some point during the year, we usually ask our students to name some of the things they love about Code Club. Then we have them compare these with their expectations at the start of the year. It's a good way to get some feedback on what worked for them, and also see how Code Club is perceived by the students. From the perspective of teachers and volunteers, we also track progress of students as they progress, so we know when they've had wins, and try to be there when they might be struggling with push through various challenges. Although everyone's busy, we also try to collaborate and talk about our impressions of each week and where we can improve and what we should keep going with. It helps to also get a broader perspective on each session and over time. Most times, if I see someone exclaim, \"Awesome!\" when they achieve something or get a project completed, I quietly think to myself, \"that's another person for whom it's been worthwhile!\". Another benefit of tracking progress is realised in successive years, when skill levels between experienced and new students start to increase: It allows us to look at what an individual student has done, so that we have an idea of their skill level, and can suggest an appropriate activity that will challenge them enough to learn, but not so much that they get discouraged. Lighting a fire under as many students as possible When I say \"lighting a fire\", I mean figuring out what gets kids excited about Making/Coding and really helping them work to make progress and reach milestones and larger goals. Everyone seems to get excited about different aspects or areas, so it's really a case of helping the students to persevere until they find what they like about it, and get a chance to understand enough about coding and creating, to get what they want out of it. e.g. during out Devs and Testers activity, we saw people fall into different roles as things progressed. Personally, I remember being the kid who just didn't get a few things at first...and so we encourage all questions as we continue helping everyone to get better at figuring things out, and they become more confident. Sometimes it can take a while to figure out what people are into; and it's such a great moment when we see the light come on after someone's just realised that there's something that resonates with them, in what we're doing. Of course not everyone gets to that point, or wants to hang in there to find out...if that's the case, or it's just not the right time for someone, we'll also try to find out, as there's always seems to be a fairly constant waiting list of others who want to get into our Code Club. Getting support from parents and teachers This sounds great, but how do I get enough people to help in the first place? The start is probably the hardest part. People don't really always understand the benefits of kids learning to code or playing with robots. Sometimes kids just aren't interested until they see a sibling or friend create cool things. And then their initial perceptions may have been incorrect, so realising that coding allows them to do much more than they or their parents anticipated can be a little frustrating if they didn't previously apply. However, as we run Code Club for a large range of ages, there's always next year if they don't get in at a lower age. Other ways we help others in the school to see into Code Club, is by doing presentations in assembly, where parents, teachers, and other students can see what our Code Club kids have created. Some of the events that have received great responses from teachers and parents include: having students showcase their game entries after encouraging them to enter a competition and winning prizes taking students to speak at various external presentations, where they receive recognition for their achievements inviting other teachers to visit Code Club while it is running, and having kids explain the activities such as Scratch and Python projects, both on the screen and integrating with the real world with robots having students choose Code Club activities as a way of communicating their knowledge in another academic subject, that is unrelated to programming encouraging parents to turn up early to see their kids' projects some weeks talking to parents when they ask questions about coding and Code Club activities, especially around the time of large events such as Moonhack. preparing demonstrations and displays for school open days, or talking to prospective students, and finding out what they may have previously experienced having students present their games to others in Code Club By exposing others to projects that kids have worked on, often we've found that incorrect expectations are replaced with an eagerness to embrace what a number of groups are doing to provide maker/coding/entrepreneurial skills and opportunities. And quite often, parents and friends will ask questions about Code Club, and once they understand what is involved, just end up volunteering right there. Interestingly, during one of our meetups, a fellow volunteer even told us about a Code Club that was comprised on of senior citizens!","tags":"scratch","title":"Showing progress"},{"url":"/python-gopigo-robot-workshop.html","text":"Background Following on from our Scratch Robot Workshop we've been running a second workshop that allows our students to apply some of the Python skills gained from previous Code Club World projects . This workshop lets students connect to the GoPiGo robot to read and understand example scripts, and also see how abstraction is used to simply programming using functions. The information gathered by learning to reverse-engineer existing scripts is used to creat their own script, using sensors to gather information from the robot's environment and allow it to perform various tasks. Although the workshop gives a specific example for this task, the process can then be repeated to learn how to interact with other sensors and add new features to the robot. The workshop I've included a copy of the workshop document here , that we've been working off, to use as a base to run your own workshops. There's now a number of different ways to connect to the Raspberry Pi on the GoPiGo, and we have used both the browser method, as well as connecting via an terminal connection directly (using SSH). The idea here is to allow enough options that you can find one that will work well in your environment. Having the confidence to show students that the command line interface (CLI) is nothing to be afraid of has been useful to both get them feeling comfortable about weaning off visual interfaces, and makes it easier for future Python projects that can work on the relatively inexpensive Raspberry Pi with many available add-on boards and sensors.","tags":"robots","title":"Python GoPiGo Robot workshop"},{"url":"/helping-beginners-learn-to-troubleshoot-their-code.html","text":"After the initial excitement of 'hey I'm actually coding!' and creating some working code, the next step is often to put together the code in different ways and test our understanding. The faster you progress, the sooner this time will come. In other words, having your code not work is a great sign that you're putting in the effort to progress. This also applies if you're a teacher or volunteer who may be starting to put things together yourself, while helping kids learn. It always helps to have a positive approach when helping someone who has reached this point for the first time i.e. it's a good thing, and a great opportunity to learn! Find out what we are trying to do The first thing to ask when helping someone, is to find out what they are trying to do with the non-working code. Have the student describe the idea behind the code. If things are unclear, ask about the context of the code in the game or program e.g. 'Tell me about the overall idea of the game' Have things become over-complicated? Before we walk through the code, it's important to ask ourselves whether we're using the most straight-forward approach. Sometimes things can become more complicated than they need to be, without us even realising. Taking things back to basics can make the code seem clearer and easier to read, especially later on. Once we know what we are trying to achieve with the code, we can work out whether it is the simplest and most readable way to do it. Strip the code down to the bare basics If you find that the code has become overly complicated, it can help to take out some of the extra code. In Scratch, you can leave these in the scripts area, as they won't run unless there is a starting block at the top, such as when green flag pressed . This can make it easier to replace the code if we need to. Other times, it may be possible to create a fresh project; in another tab, if you're using Scratch online, or in another file if we're using Python. Keep in mind, with Python, you can also try commands out in the Python shell using interactive mode . Once you've solved the problem in the code, you can easily add the other parts of the code, if they are still required once it is fixed. Talk through your troubleshooting thought process When I was learning to code as a kid, I still recall someone trying to help, almost silently whispering to themself, and it felt bad to even ask what they were doing. I found it hard to know what they were doing, and would have to ask them to explain it afterwards, which sometimes ended up seeming more complicated than it should have been. While helping someone troubleshoot their code, it really helps to talk about the steps you're going through. The first step might be to walk through the code, line by line, and asking questions about the code like, 'What does this do?' or 'Is this the section that checks whether the player has died?'. Asking questions like these can also help the student or yourself understand their code better, which may help solve the problem. Talking through the steps you take to understand the code, can also be useful. This could include, 'Ok, so we're checking whether our sprite is left of this positing, is that what we want?' or 'It looks like we're only checking once to see if a key is pressed, should we be repeating this forever?'. Usually, going through these steps can get the student to suddenly realise what the problem is, and also learn how they would approach a problem next time. The idea is to also show the student how to approach troubleshooting, in addition to fixing the immediate problem with their code. Reinforce what we learned while troubleshooting Once the problem with the code has been fixed, and everything is working, it helps to quickly summarise what was wrong. The student will be keen to get on with things at this point, so keep it quick and clear. e.g. 'It looks like we needed to check for a keypress all the time, rather than just once'. Then talk about how we could prevent these problems again, 'So just remember when we checking for keys to be pressed using if..then we can put it in a loop to make it repeat`. Start simply Sometimes the project could turn out to be overly difficult for the student. If there's some things that the student might need to learn first, it can help to take them back to a project that helps them understand the concepts before tackling a more difficult project. Most students will find this easier as it allows them to make more progress and feel less frustrated.","tags":"scratch","title":"Helping beginners learn to troubleshoot their code"},{"url":"/term-3-python-robot-roundup.html","text":"This term we had some great fun with Python. Raspberry Pi Robots with Python One of the major changes was the introduction of a second robot workshop, using the GoPiGo by Dexter Industries. One of the key differences in this robot, from our BrickPi robot, is that it doesn't use Lego Mindstorm parts. It is equipped with a camera and ultrasonic (distance) sensor, which can be rotated together in an arc, using a small servo motor. Last year, our Scratch robot workshop was run with larger groups of around five students. But there just wasn't enough for everyone to do at once, which left some idle or distracted. This year we ran both robot workshops with teams of two; one person to monitor the robot, and prevent crashes, and the other writing and runing the code. These roles were often swapped beteen the pair, during the activity. We found it great to use Python for the GoPiGo, as it took Python away from being only on the screen, to something that could make phyiscal things move and react. It also helped show that the skills, we learned in earlier activities, helped us to feel comfortable in different programming environments. Hopefully, the extra flexibility we get by using Python will allow us to take some of the ideas the kids have, further in the future. Useful skills Some of the skills we learned earlier on were useful when programming the Robot in Python. These include: using the Python shell to try out commands and figure out bugs in our code understanding different ways to edit Python files in Windows, MacOS, and Linux learning ways to view files while editing others using the command line for moving around the file system, and listing files or directories The GoPiGo workshop` With some of the grade 6s, we have been going through learning about some networking and connecting to a command terminal on the Raspberry Pi in the GoPiGo robot. By examining Python files, we were able to see where functions were defined. Looking at the example Python files, we could see these importing the functions from the other files, to make it easier to write our programs. During a quick demo we sa the difference between import with import <module> and from <module> import.. and talked about the confusion if we were to overwrite our built-in functions such as print() in Python. Going through the Dexter Industries example Python files line-by-line enabled the kids to put together their own scripts rather than copying and pasting. So by taking a very different path to making our robot autonomous, compared to the BrickPi robot workshop, the kids ended up feeling much more confident with Python. There's been a lot of questions that begin with, \"In Python, can we...\". Improvements in our lab environment One of the main roadblocks in our Code Club, has been a lack of control in software and network access. For the robot workshops, we started using a home-made wifi router, that I built from a Raspberry Pi Zero. Although this worked very well for our field trip to demo our kids' skills to politicians, we started to have issues back at school. Eventually, I got a cheap TP-LINK mobile wifi access point (which runs open source software - woohoo), resulting in better productivity in our robot workshops. We've also ended up starting the robot workshops as soon as the kids arrive, so we get the most value from the time. We ran both the BrickPi and GoPiGo robot workshops in an area that was partially separated from the main Code Club activities. This allowed kids to stay more focussed, as it was part of the quiet area that we have set up. It was also really useful to have a whiteboard or similar to quickly explain concepts; so we could just get on with the 'doing' part of the workshop. Some other things to consider with a lab environment would include what sort of networks you are allowed to expose the computers to, and what sort of access is required for a given activity. Generally, there should be no need to ever have the computers directly Internet-facing i.e. with an IP address that can directly be accessed from the Internet. If you want to use some of the new Google resources for speech and image recognition, you'll only need to initiate connections out to the Internet, rather than from it. Moving forward Now that we can comfortably connect to the robot, and write some useful Python, it will be exciting to push ourselves further, using the picamera, sensors, and a handy little amplified speaker we found. One idea was to get the robot sending some information to a Raspberry Pi web server we have set up!","tags":"robots","title":"Term 3 Python Robot roundup"},{"url":"/scratch-patterns.html","text":"This post is for kids or teachers who have a basic understanding of the Scratch interface. It's really light, and for more detailed information you should always refer to the Scratch Wiki . How do I make my player move when I press keys? This is probably the most common beginner question I hear at our Code Club. If you asked this, that's great, because it means you're already got an idea of what you want the player to do in your game. Design and planning is a large part of the game-building process and can save you lots of time later on. If you have your main idea clear in your mind (sketching it on paper always helps), it will make many decisions easier to make as you progress. For example, you might not be sure whether to use a script on your sprite or background: But if you refer to your basic idea, you might realise that you can trigger a sound effect at the same time, or some other reason for doing it a certain way. The code above will move your sprite left and right, when pressing the 'a' or 'd' keys. Following this pattern, you might be able to work out how to move up and down, and do other things when a key is pressed. How do I make the player wrap/stop at the edge of the screen? Here's another common question, \"How do I get my sprite to go off one side and come back on the other?\". This is known as \"wrapping\" because the sprite \"wraps\" around, much like text does. This code can just run in the background, sometimes we might also want to set the x and y positions of the sprite, before the forever loop. This makes sure that the sprite will always start in the same place when we click the green flag. Play around with the numbers to figure out how to make the sprite stop at the edges of the screen, instead of wrapping. My sprites aren't in the right place when my program runs! In the same way that we set the x and y positions above, we can also set other attributes of our sprites, such as costume , size , or effect . Make sure you do this before the forever loop, since we only want to do this once when our script runs. Setting things up when our program starts is called 'initialisation'. How do I do gravity? This is essentially a forever loop that keeps changing y by a negative value; always moving our sprite downwards. Remember, now that you've got your sprite always moving down, you'll still need to check for a collision with the ground! For the ground, just create a sprite, and draw a line across, then name the sprite something meaningful, like say, 'ground'. Place the sprite at x position 0 and y position 0, to make sure it will line up with your game screen. Then just add a check to the above gravity loop, so your sprite will only go down when not touching the ground. There's an interesting discussion of gravity on the Scratch wiki , although as I mentioned previously I really like the way Al Sweigart explains it. If you want to get started there's also a super easy Code Club project, the Dodgeball project . Drawing your own sprites When I wrote the Moonhack activity I wanted to create some animal sprites. The way I approached this was to search the Internet for some animals. Noticing that the animal shapes could be built up from basic circles and triangles, I drew some of these and then coloured them in. Once you have the basic shape built up, it's easy enough to add some details. When you want to animate these, just duplicate a sprite, and change it slightly. Then write some code to change the costume at the right times. If you borrow some images you find online, be sure to check whether there is any licensing or requirements for attribution (telling people where you got the image from). That way, you won't get an email later from someone who is upset that you didn't give them credit for their work. Taking these ideas further Although the examples above are just on Scratch, the same ideas can be applied to more advanced projects. In our Code Club's robot workshops , we use Scratch and Python to control motors and servos. The motors move the robot around, and rather than checking for Scratch screen borders, we use sensors to see if we are going to bump into a wall. It's essentially the same concept applied to a robot instead of a sprite. Before we set up our sensor, we initially control our robot with keys, much like we do with sprites in Scratch. Our servo is used to move a camera around, and in this case, we check the position of the servo to stop it when it goes too far. So while you're making a game in Scratch, try and think about how the same concepts can be applied to other things, such as robots, lights, or anything we might want to automate. What about automating other checks? Warning: Don't mess with anything that plugs into a power point! Where can I learn more? These are just some ideas to get you started, based on questions we hear at our Code Club. Try searching the Scratch wiki for more features that you'd like to include in Scratch games. Or search the Scratch site where lots of people have their own ways of doing things. Try and look for your own patterns in code, and you'll find yourself reusing thes again and again. Don't just copy the first one you find, though. While looking at someone else's project, you may realise that there's an even easier way. Something else could happen: you may find that what seemed really hard, becomes easier when you know the patterns :). There's also lots of great books that will cover Scratch concepts in much more depth. Because commercial books have generally been edited a number of times, by people who are great at explaining things, they can sometimes be much easier to understand and follow than trying to collect information from many pages online.","tags":"scratch","title":"Scratch patterns"},{"url":"/code-club-and-questions-about-programming.html","text":"During our Code Club sessions, a lot of questions come up. It reminds me of when I was at school and trying to figure out how all these pieces of information fitted together. A good analogy might be piano lessons: school kids can often find themselves learning piano and doing exams, without anyone ever stopping to ask them what they wanted to get out of it or how anything they learned would help them achieve anything useful. In this post, I'll try to explain the why of some fo what we cover in our Code Club. Scratch Scratch allows us to visually learn programming principles and structures, and can be used online or install to run stand-alone on a computer. It doesn't take much to get quick visual feedback from Scratch, and doesn't need too much specific knowledge to get started. However, when we get more ambitious with Scratch, things can still get complicated. At this point, it can be easy to assume that Scratch can't do what you want. But when we look through video game history, there's lots of examples where developers have managed to squeeze a whole lot out of computers and consoles that we previously seen as limited. Although Scratch isn't any where near as complicated as the Commodore 64 or the PSX One, there's a big difference in how the more experienced programmers do things. Usually their code is much easier to read and understand, and there's often less of it. A lot of this comes down to good design and thinking ahead. In some ways, this is the next level of Scratch programming. Although the 1.4 version of Scratch is outdated, since it was written in Python, it can be extended. Version 2.0 of Scratch is available online, and the stand-alone version runs on the Adobe Air runtime environment. So there are still some uses for version 1.4 by extending it with Python, to interact with external devices. It is also the only version that will currently run on the small, low-cost Raspberry Pi computer, out of the box. By leveraging Python plugins or scripts with Scratch, we can use our Scratch skills to interact with more than just the visual and audio of the Scratch environment. Python Python is essentially a text-based language, rather than having a visual drag and drop interface like Scratch. This doesn't mean that it can't be used to create graphs, or graphical user interfaces (GUIs), or even web interfaces. It just means that we write it as text. One way of creating solutions to problems with programming languages is by creating a model of a problem so it is easier to understand. Since Python is an object-orientated programming language, it can be used to create custom data objects that more closely model our solution. This makes it easier to describe real things when programming. For example, say we wanted to create a way to keep track of books in a library. We can use Python to represent books and the different attibutes a book has. Examples of book attributes could be: author number of pages fiction or non-fiction category e.g. history, art, biographical, science fiction, thriller etc. hardcover, paperback, or ebook ebook formats available So we could create a book object in Python. And a book object could have a number of actions performed on it. In object-orientated languages, these are known as methods . We could also have a base book object, and then have other book objects that are based on the original book object. This means they are still books, but with additional attributes. e.g. an ebook is still a book, but can come in a number of formats. So we can group these book objects and their methods (actions that can be performed on them, or things they can do) as what is called a class . This is as much object-orientated talk as I want to go into here though. I've tried to explain this in fairly simple terms, since the idea is only to show that Python is a much bigger, and more powerful, langauge than Scratch. We can still use the ideas we learned about in Scratch, such as decision making, input and output of data, repeating tasks, and keeping data in a variety of structures, such as lists. In addition to this, I've already talked about some of what Python can do in another post. And believe it or not, doing complicated things in Python can sometimes only take a few lines of code! HTML and web interfaces By starting with Scratch, we learn simple programming ideas such as performing a number of tasks, and making decisions based on information provided to our program. Then we can use these concepts to step up to Python programming, which just happens to run on multiple operating systems, and can interact with many more things such as computer networks, files, devices, and so on. Although Python is text-based, (we have to type a bit), the more things we create in Python, the less we have to create because we can make our code reusable . We learn about HTML and create web sites in Code Club because later we can access a web interface with mobile devices, and our laptops. What this means to us, is that we can create a web application by combining our Python code with HTML to let our end-users do cool things. Last year we went through some examples of web sites that run on Python. In a similar way that Scratch is an easier way to approach learning programming, Python is an easier way to start writing very capable programming. Although there are many programming languages, it's quicker to start making something happen in Python whereas other programming languages can require a lot of code that won't make sense. So Python is much more minimal, which makes it easier to learn with. Another language that is also like this, is Swift; used for creating applications on Apple devices. Are we going to make mobile apps with Python? A few people at Code Club asked whether we can use Python to create a mobile app. The answer to this question is 'no' (technically you can but it's not really the best-suited language for it) but with Python we are more likely to create a web application rather than a native (runs on the mobile device) app. As I mentioned above, a language like Swift would be more suited for creating a mobile app. Stencyl is a visual environment suited for games, and the programming interface does work a lot like Scratch. A couple of main differences between Scratch and Stencyl is that Stencyl has a lot more features, and the resulting games can be run online in a browser, on a computer, and also on mobile devices. These can then be pushed to app stores and some very successful games have been created with Stencyl. There are however, computer tools written in Python, such as editors, bug tracking systems, and even security tools, and much more. I don't want to type, and what about these ways of creating without any programming? The main objective of Code Club, is to teach programming skills so that you have the best way to go from an idea, to something that is really useful. One of the objectives is to help you become familiar with programming concepts and fluent in some programming languages. Some of the advantages of this are: if you wanted to automate a task that takes a long time every day, you could do this and save yourself lots of time in the long term you can add your own ideas to other peoples' ideas by collaborating you can connect devices together to create new inventions you can build tools to make existing technology do more than they were intended to do For example; although we use the Tickle app to control drones and Spheros, using modules available in Python we could write code that uses a Sphero as an interface to control a drone, or make a tool to automatically modify 3d printer designs in a way that the current software won't let us, or we could program a tiny computer to be carried by a drone and perform tasks with sensors that it was not rpreviously equipped with. We could even create a tool to help us understand how the current applications are interacting with our devices, and improve or adapt these to other uses. I want to create something, but I'm not sure how That's great! A good way to get started is to look at other peoples' code and try to understand how it works. Then think about how you might be able to apply that to your program. Try to break down what you want to do, into smaller tasks. If you say, wanted to make a platform game, try breaking your idea down into the various parts, for example: moving a player's character around the screen using key controls creating gravity preventing the player from falling through objects that should be solid keeping score prevent the player from disappearing off the side of the screen Keep asking the teachers and volunteers at Code Club, until you get the information you need. Sometimes it may be as simple as pointing you in the direction of some information that is online. There's plenty of tutorials too, and sometimes it just helps to see a simpler example to figure it out in your head. If a friend is doing something cool, go and tell them, and either look at their code or ask how they got it working or figured it out. Hearing about someone else's thought processes or workflow can be useful to improve how you approach solving problems, or troubleshooting a bug in your code. If you look something up and it doesn't make sense, just find another example of the same thing, or ask someone to explain it to you. It's always useful to try and walk through lines of code and predict what will happen before running it. And if things just don't work, don't be afraid to make a copy of your own work, and then go right back to the start. If you have a plan sketched out, that can be invaluable to keep things simple and clear in your mind. Perhaps you find it harder to concentrate when there's lots of noise during Code Club: We have allocated some quiet areas for our Code Club, and the feedback we get is that some people find it easier to focus on what they are working on. At times it can also make the time seem to pass quite fast. This usually means you're working hard and will likely make some good progress. Other times, walking away for 10 minutes can give you a new perspective and help to re-focus. Don't forget that you'll progress faster if you do some programming each day, even if it is just 10 minutes each night at home. Make these skills your own first and foremost, rather than thinking of it as a set task, or work to be done. If you treat Code Club as an opportunity, you'll get more out of it. If you do use something learned from someone else's code, do the right thing, and make sure you attribute it to that person. Some code is licensed and may require that you make the original code available, or that you must say where it came from, or can't sell a creation based on it. It's important to respect these requirements as it's good to acknowledge when you got help, and it's no good putting in a lot of work, only to be forced to take down what you created because you broke the rules. Sometimes you may find the the original author might even promote your game because it was based on theirs and you gave proper attribution.","tags":"python","title":"Code Club and questions about programming"},{"url":"/setting-up-your-raspberry-pi-robots-for-multiple-locations.html","text":"Using Raspberry Pi robotos in multiple locations If you run a Code Club at a location that you don't have access to during the week, you may already have discovered how important it is to have everything set up beforehand. This often means being able to communicate what you want to whoever looks after the computer network at your Code Club location. There's a few possible scenarios: Your location already has computers set up and connected to the network. In this case things are pretty simple, as long as you're just logging into sites with web browsers. As long as the network is up, you're good. You'll need a plan B if the network or Internet connectivity goes down. You bring your own network and computers. This is a fairly robust situation, except that you have to haul multiple computers around. All you need is power and heating/cooling to make things comfortable. Depending on whether you do things online or offline, you may need to have a place to save projects to. You have some online and activities going, but also have Raspberry Pis, robots, and some other hardware. Since our situation is the 3rd scenario, I'm going to write a bit about some of the challenges we've faced and try to share some tips for dealing with these so that your room full of kids doesn't revolt and eat you alive like a scene out of the Walking Dead. Hopefully this information will be most useful for those who are thinking of taking their Code Club the next level by adding a few more activities. A bit about computer networks If you bring your own network, you are most likely reasonably good with configuring everything, so you can skip this section. However, if you've been using an existing network so far, it's worth understanding network basics, so you can do some light troubleshooting and tell the IT guys when things are broken, or save your Code Club session by quickly fixing issues yourself. It's generally useful to underestand how things work on the network so that you can easily connect new devices to the network (if this is allowed at your location). If you're doing Code Club at a school, you probably will be allowed to connect other things. This YouTube clip is one of the simpler explanations of computer networks. It should give you enough of an understanding to know what information you need to get from the IT guys in order to set up fun stuff on the network. Connecting other operating systems to your Code Club network Some of the places where a Code Club is run will usually have one predominant operating system on their computers. This is likely to be Windows, Mac OS X, and some might have Linux. However, it's unlikely that there will be anywhere with all three operating systems. This means that one day, you may want to connect something to the network, that is out of the comfort zone of the IT guy at the school or library where your Code Club runs. At some point, it really pays to find a time to attend the Code Club location outside club session time. You may only have to do this once, and this gives you a chance to tee up a time to talk to the IT guy about how their network works, or anything that needs to be added/changed on the main computers you use. If you have Raspberry Pis or something that runs on an operating system that is not used at that site, you may have a volunteer who can bridge that gap between yourself and the IT guys when it comes to anything non-standard to that environment. Remember security and privacy u Keep in mind that network details are sensitive, and can let an unauthorised party connect to a network; so keep the main details like passwords secret and only talk in general terms if you're seeking help from an outsider. Preparing your robots Connect to your robot's IP address as the pi user, using ssh from the Terminal app on Mac OS X, or from Putty on Windows. Uncomment the following (by removing the ‘#') in the /boot/config.txt file. Type sudo nano /boot/config.txt to edit that file. hdmi_force_hotplug=1 Use nano to configure the required wireless connections in /etc/wpa_supplicant/wpa_supplicant.conf o if you label each connection using the id_str = \"<name to identify location e.g. home>\" then you can use those instead of wlan0 in the file /etc/network/interfaces Here's where I found the information. However, if you have a portable network access point (AP), you'll want your rpi to connect to that in preference to others e.g. if you are at the school and your portable wifi AP is on, you might want your robots to connect to your own portable wifi AP rather than the school wifi. In this case, you can set a priority for each network in /etc/networks/interfaces using a line like priority = 2 where the configuration with the highest priority will be connected to first. Take your network with you for demos There's times when it really pays off to be able to demo things that have been created at Code Club. It really helps for parents, other teachers, and any other stakeholders to see value by giving a taster of what Code Club is about. This applies equally to other similar activities such as school maker groups. Although we have regular visits from parents, kids, and teachers, sometimes you'll be asked to present at a different location. This means you either have to: depend on the wifi at the location, meaning you will need to bring or borryow screens for your Raspberry Pis or figure out which address they end up with, etc. bring your own wifi AP and have the IP addresses of your Raspberry Pi robots set up in advance, and working 'out of the box'. Obviously the latter method makes for less things that could go wrong, since the only thing you're depending on is that there will be power. Even then, you can bring your own power packs. There's a few ways to set up your own network: use a wifi AP from your phone. This just means you have to make sure your phone stays near the robots during the demo. Usually, this means you'll have 4G Internet as well, which is handy for Scratch and other online activities. Just make sure you have sufficient mobile data to cope with Internet activity for your demo. purchase or find an old wifi AP device that you can bring along. This can often be connected at the location, as long as you've asked for this provision beforehand. Otherwise, if you only need a local network and no Internet, you're all good without plugging into another network. create a makeshift wifi AP from a Raspberry Pi and wifi adapter. I did this recently using a Raspberry Pi Zero and an edumax wifi dongle. It worked really well and was quick to do. This requires the following software: dhcpd (a dhcp server to give out IP addresses, and can support static i.e. always set ones that you know) and hostapd. The last piece of software needs to be a version that supports your wifi dongle so you might just want to search around to go this route. Here's one I set up for a demo recently. It took about 20 minutes but I've done it before. If you're tight on time, and aren't all that technical, go for the other options. Just remember that if you're doing robots without monitors (headless) then you want to be able to know what IP address they'll be using. If you're borrowing the location's network, you may need to port scan. Again if this doesn't make sense just ask someone more knowledgeable than you, like a technical volunteer. Configure the Nano text editor on your Pi If you're connecting via the terminal (using ssh or putty on windows) then nano is probably the easiest to use if you're new to Linux. You can set the configuration for the nano text editor. The options I use are: set mouse set tabstospaces Since set mouse will let you click on a line to go to it, and you can also hold down the alt key to drag-select some text with the mouse, then either right-click to select copy, or use the usual key combos e.g. command-c to copy and command-v to paste if connecting from Mac OS X, or control-c and control-v if connecting from Windows. Using set multibuffer allows you to open up multiple files in nano at one timeYou can look up information like this on stackoverflow.com Test everything beforehand Although you may think everything is set up exactly as it should be, it's important to test everything before doing things live. Since our Code Club is only one hour per week, if I mess up things, we have to wait another week until we can try again. This makes everyone sad and can give an inaccurate impression that the actual workshop itself is more difficult than it really is. If you're a teacher with limited technical skills, it works well if you can get a volunteer with those skills. When we first started, a previous student and I were the only ones to put up our hands to volunteer, but as things started to get rolling and peoples' circumstances changed, we have started to gather more and more volunteers giving us a wider spread of skills. It really helps to have a run sheet to follow with the robots. I found that if people ask questions that are in the run sheet, I'll point them back to that. This helps them stay on the run sheet and reminds them to read more carefully. Once they get focussed, things will speed up and at the end you'll be having to drag them away kicking and screaming, because they're having so much fun ;).","tags":"robots","title":"Setting up your Raspberry Pi robots for multiple locations"},{"url":"/scratch-brickpi-robot-workshop.html","text":"The robots At our Code Club, we currently have two robots both are made by Dexter Industries and are controlled from a Raspberry Pi . Our BrickPi robot uses a Raspberry Pi model 1B , combined with Lego Mindstorms more recent EV3 motors and sensors Our GoPiGo robot uses the same model Raspberry Pi, with one ultrasonic sensor a Raspberry Pi camera , and a servo that moves both Here's an photo from when we first put them together: This is before we added some of the extras described above. We chose Raspberry Pi-based robots, firstly because I had some Raspberry Pis spare, and donated them to our Code Club. Since the kids start with Scratch visual programming, having robots that can be programmed with Scratch capitalises on earlier pre-written exercises, and lets the kids know that what they are learning can affect the real world. Preparing for the workshops While programming the robots, we have 8 x AA batteries in a battery pack, with a micro USB power adapter connected as well. The motors require the battery pack to, and we found that we need the power to keep the wifi connection more stable when we are doing a lot of communicating with the robot. Once we have programmed the robot, we'll test it out, with the power still connected. Later when we have made the robot autonomous, we disconnect the power adapter, running it solely on the battery pack. A few useful tips from our experiences: have multiple battery packs so that you can swap a new one in if one becomes drained during the workshop rechargable batteries were easier compared to disposable, as we can charge them beforehand, don't need to buy more, and they have a more consistent running life than if we use different brands of disposables. it helps to get a charger that shows when the batteries are charged get a simple battery tester so you can tell which batteries need to be charged groups of two or three for one robot work better than larger groups because people are less likely to be left idle and distracted if the answer to a question is in the activity sheet, I let the kids know rather than just answering, so they keep their bearings in the activty sheet we normally record our progress with video and audio, then move on to the next step. There's something great about seeing the work on video. do enough testing beforehand to ensure that the robots connect to the network every time, and it can help to configure multiple connections, each with their own IP addresses If you've got a Code Club or similar, and want to run robot workshops yourself, you can download the student activity sheet I made here . I recently ran our teachers and volunteers through some training so we can run a few of these in parallel. We always start with Scratch, and then some kids will ask to do more in Python once they see what can be done. Using Python directly, allows for a lot more flexibility, since it is easier to interact with the Raspberry Pi e.g. speech or video streaming. Our robot workshops usually last for at least two sessions of one hour each. This lets the kids go through the activity sheet for the first session, and then plan out and add enhancements in the next. Here's the teacher notes to go with the workshop ; these contain useful information on preparation and delivery of the workshop.","tags":"robots","title":"Scratch BrickPi Robot workshop"},{"url":"/importing-more-python-functionality.html","text":"Python built-in functions and modules At Code Club our first Python scripts usually involve using built-in commands, otherwise known as functions e.g. print() , input() , int() . A list of built-in functions for Python 3 is available here . Sooner or later we might want to do something a little more interesting, like generate some random-ish numbers, or process some information in file, or connect to another computer. In some of the Python tutorials we've done, you'll notice the import statement being used to import more functions from the the Python standard library . An example of importing from the Python standard library: import random random_number = random . randint ( 1 , 1000 ) print ( \"Here's a random number: \" , random_number ) You could type the above Python code directly into the Python 3 shell or put it in a text file and called it something like print_random_number.py . We could run the latter in the Mac OS X terminal , in Linux e.g. on a Raspberry Pi, or in the Windows cmd.exe . To run it in Mac OS X, type: python -3 print_random_number.py Which results in: Here's a random number: 716 We imported the module, random , from the Python standard library. To run the function randint() from this module, we put the name of the module in front of it. This particular example will generate a random-ish (pseudo-random) whole number between 1 and 1000. If you looked at the Python standard library , you'll have seen lots of things to import for your Python scripts. Sometimes when we start learning to code, other people who can already code get excited and really want to tell you all of the cool stuff you can do. But if they did that, it could easily be overwhelming and make it look too way too complicated and hard to learn. But once you get a few scripts written and start to think of problems that could easily be solved by writing a script e.g. reading information from a website, processing it, and adding it to a spreadsheet. So...taking this import idea further, since Python is open source software , anyone who is interested in learning, can contribute additonal functionality to Python. What else can I do with Python? You can find a list of additional Python packages on this page . There's over 80,000 packages there, each containing functions that you can import into your scripts. Go to the 'list packages' link on the left to see all of them (be aware this can take a while to load). These packages can make it possible to useful tasks in only a few lines. This means that assuming your code is logically structured, you can create scripts that are much easier to read, and add to. This is important if you want collaborate with people, or have others use your code in their creations. To install these packages, a good way is to use a tool called pip or easy_install . On Windows, Mac OS X, or Linux if you're already installed Python from https://python.org, you can just download get-pip.py and run it with Python (it's just a Python script). Then you can just type pip search to find a package you want, and once you know the name of the package, type pip install <put name of package here> . Usually there are examples of how to use the package online. It's best to try the examples first, so you can get something that works, to help you learn to use the functions in your scripts. There are also a large number of Python projects stored in open source respositories like GitHub and BitBucket just to name a couple. When developers (people who write code) want to collaborate and share their code, they will store it in these type of respositories. This makes it easy for others to fork their projects, and either contribute using pull requests , or create a new project based on the forked project. So if you have a gadget that you're using an app to control, it might be interesting to search online for a Python script or Software Development Kit (SDK) that you can use to control it with, and understand how you can integrate it into your own projects. Many of these scripts that can interact with interesting hardware, come about from interested people observing how something works, and then figure out how to make a language like Python, send the same commands. This can allow you more control and flexibility than the standard app controls, and allow you to trigger the controls using other sensors e.g. using a Sphero to control a robot. Sometimes what is happening inside the case of electronic hardware can be much simpler than we expect. But we don't know unless we try to listen to control communications or search for information that helps us. This attitude of curiosity is something I like to work toward at our Code Club. Here's a video I found, by Paul McWhorter, showing how Python can be used to light up a Light Emitting Diode (LED) on a small Raspberry Pi computer. A few of the Code Club kids have installed Python at home. That's a good way to learn faster and more often, since it can be hard to learn quickly if you have to keep backtracking. Python is great because it's free and easy to write scripts without a lot of boilerplate code. Boilerplate code is lines of extra code that need to be added before you can start coding in some languages. It's nice that Python doesn't need too much of this, and because it recognises indentation, it's quite easy to see the structure of Python programs. This makes it a lot quicker to follow what is going on, and partially why we're starting with it. A really good exercise when learning to code, is to go through someone else's Python script and try to figure out what it does. Then if you get stuck, go and ask someone who knows a bit more, and get them to walk you through the parts that don't make sense to you.","tags":"python","title":"Importing more Python functionality"},{"url":"/text-editors-and-helping-kids-learn-python.html","text":"This post is primarily about some of the discussions we've had about facillitating Python coding at our Code Club, some of our experiences as a Code Club, and some of my ideas about what the kids can use Python skills for. Dealing with a variety of different operating systems for a variety of different projects, I try to use whatever tools are available on the platform we're using, and do the job. Although it might take a little bit longer to get the hang of things, and sometimes it's not all as straightforward as we'd like, it means we end up being a little more adaptable. We purposely use tools that are free and open source, or that come with the operating system, whenever we can. e.g. there's been times when we've just use notepad on Windows, or nano in a Mac OS X terminal, or when connected to a Raspberry Pi. This gives more flexibility since we can add our own modifications if required, and makes them readily accessible for kids to be able to replicate things at home. I think that is really in the spirit of learning to make our own code creations, and contributing to improve things as we go. Also, when we initially used the Python IDLE tools, the kids were getting a bit confused, until we were able to explain that Python scripts are really just text files. We played with Tinker for a short while, although for it seemed like it abstracted Python and HTML away from being able to interact with real things. Some kids seemed frustrated that they couldn't easily upload their own image files, and we couldn't import other Python packages. Since we've already talked about web sites, applications, and robots that use Python, it makes sense for us to be using Python in a context where this seems more accessible. Likewise, although sometimes we will start looking at devices like the Sphero, that are initially controlled with an app, I've had some great discussions about what's really happening behind the scenes. Once we understand how things really work at a low level, it's great to try and write some code that will allows us to control things directly. I remember a friend at school once saying that while coding sounds good, \"it's all still just on a screen\". Interestingly, that friend does spend a lot of his work time sitting in front of such a screen. The really exciting thing about having Raspberry Pis connected to arduinos controlling robots, is that suddenly not just stuck in a computer screen, we're affecting the world around us. One of our students last year mentioned that he had initially thought coding was only about games, and during Code Club, had realised that it meant he could make all manner of useful inventions that were driven by code. Some issues we come across when using a variety of editors include: sometimes the lack of line numbers can make us work a little harder to troubleshoot our scripts we have to understand the basics of how to get around without a mouse at times linefeeds in a file taken from one operating system can look like rubbish in the editor of another operating system we get less information while typing in our code the more basic editors don't recognise that we're writing Python, so they don't highlight important parts of the commands (syntax highlighting) so we actually have to know what we're doing...eventually I'd forgotten the Atom editor until recently. I used to use it just for HTML and style sheets, but then I remembered it can work nicely with Python, since it recognises it and fixes most of the above issues (we'd still need nano in a terminal). However it is supported across Windows, Mac OS X, and Linux (not so much on the Raspberry Pi at this stage). It is also really easy to install, by just grabbing a .dmg file for Mac OS X or an installer for Windows, and so on. This possibly makes it a lot easier for Code Club teachers and volunteers to install on their own systems. Although I suspect that there will be some point where we will need to show how to install pip and grab the Python packages we need. You can install the Atom editor by following the instructions here for your operating system e.g. Windows, Mac OS X, or Linux.","tags":"python","title":"Text editors and helping kids learn Python"},{"url":"/tips-for-designing-your-first-scratch-games.html","text":"The idea Our Code Club is part of Code Club Australia who provide some great resources that include some fun Scratch game tutorials/exercises. When kids are new to Code Club, the best place to start is by doing several of these step-by-step activities. Sooner or later the kids start to get some ideas, and start designing some of their own game ideas. It can be easy to stay within the safety zone of what we've done previously. Sometimes that happens, and while it is a nice and easy way to spin up a working project, soon we find ourselves thinking up more complex ideas and jumping straight in to build them. Although there's a lot of tutorials and videos out there that show how to make something by following step-by-step, this post is more about the process of going from a idea to a working Scratch game. Ok, and on with the post.. Getting more out of Scratch Once we get to the point that our code gets complicated, it can be easy to lose track of what does what. At this point things can get overwhelming. It can seem like programming is a brain-melting pursuit, and it becomes frustrating, or just a whole lot of work to make our game do what we want. In this day of many distractions, it can easy to give up, move on to something else, go and watch cat videos. Although if you actually want to learn something, it might be better to go and watch a Scratch tutorial, like some of Al Sweigart's , which are well-paced and engaging. At Code Club it can also help to go and do some more exercises. Sooner or later, we realise that there are much easier ways of doing what we want, and this can make our code seem simpler and clearer. Maths is a great analogy when you think about how hard it was to do various calculations, until you worked out all these ways of visualising things in your brain, and it became much simpler. It is always great when I come across someone who looks a bit frustrated, only to see their face light up when you explain an easier way to do something. A good resource can be other Scratchers, who post tips and answers to questions in forums, or make demo Scratch projects. You can look at their code, and compare it with other similar projects. Here's an example of something that really helped me; at some point, I realised that once I created a working character, I could drag the scripts create enemies, and then use clones instead of lots of sprites, to populate my game. Before that realization, I'd find myself using way too many sprites, and thought that Scratch was so much more limited than it really is! So some of the concepts that help us at this point are: there's usually multiple ways to do something, and knowing the best way that is easy to understand and read, can allow us to make more interesting and easy to manage games without getting overwhelmed if something doesn't make sense, we may need to see it explained in a different way Solving problems and debugging Often, I see a common cycle of enthusiasm -> frustration -> problem solving -> satisfaction. When we start Code Club for the first time, a lot of us need to put our hands up when something just doesn't work. As we progress through the activities, we get to know some common mistakes that we make, and later we actually start to use tricks like showing variables or printing values to the screen to figure out why something doesn't work right. That last point is really important, because eventually our code, which may now be easier to read, more elegant, and simpler, can still be complex enough that some of these tricks are useful in determining what is going wrong, and where it is going wrong in our code. I put together a document during last year's Code Club, with a few ideas for troubleshooting Scratch bugs. You can grab it here . When I see kids getting to the point of comparing code from one game to another, or putting it isolating it in another project, or just tracing through their code, to successfully solve problems, it is obvious that they have grown from just typing in someone else's code, to actually understanding what is going on. There is a certain clarity that comes with this, and often we can visualise in our mind, some of the ways we could make something work. There is a certain level of maturity in our thinking when this happens which is both exciting and empowering. Recognizing patterns and models So guess what? In order to keep getting better at coding, and increase how fast we can create, we need to continually put ourselves though this process of attempting to do something, running into a problem, and solving that problem. That's practice, and in the same way that other activities required more energy at the start, until we mastered them, coding gradually gets easier too! And something that happens as we go through this cycle of solving problems and learning, is that we start to recognise patterns. Some example of patterns might be a common way to implement controls for a player, creating gravity, adding lots of game levels without needing so many sprites, wrapping the player to the other side of the screen when they reach the edge, and so on. Once we see these patterns and implement them in our Scratch games, it's important to start keeping a library of these. Doing this will make it much faster to pgrogram lots more games in Scratch. A great way to collect short snippets of useful code is by using the Backpack feature. The Backpack can be found t the bottom of the screen when you log into Scratch online. There is a label at the bottom, with an small arrow to view it. By dragging yours or other Scratchers' code snippets into the backpack, you will have read-made code to drag into your project. How good is that? You can probably see the time this would save. In addition to storing code snippets, the Backpack can also hold sprites and images. A good use for this might be some key animation frames, or favorite custom backgrounds. Although you can upload these too, having them online means you're not tied to your home computer or one you may use at school or an office. For more involved features you might need to just hang onto the game you created previously, as reference for something that took you ages to work out. Sometimes this could also be a trademark feature that makes all your games instantly recognizable. Have a clear plan with milestones Often I like to ask our Code Club kids to tell me about the games are creating. Many times when we get into this conversation, they can tell me a few details, but are unsure of the whole concept of the game. If we had an initial plan, we can usually go back to that plan, and compare how our coding is going. By having a plan, we can check whether our game works as designed, or if something needs to be changed. It also makes it easy to measure our progress. Sometimes game designs can be entires storyboards, with lots of different 'states' or possiblilities. However, in Scratch, it is best to keep our plan to a simple single sketch, wiht some words to outline what happens in our game. At the point where we draw up our first plan for our game design, we need to keep it really simple. This is so we can focus on getting the basic mechanics of our game working. It's easy to get a bit ambitious at first, only to find that our idea requires a lot more thought, so to start off, just keep it real simple. I noticed one of our Code Club kids has been creating what's called a changelog for each version of his game. A changelog is a record of the changes that have been added to each version of the game. That way, you can go back to the previous version instead of right back to the start. With each feature we add, we can set ourselves a milestone. A miltstone in this case, is a previously-defined point that we see as our next goal. An example could be the implementation of a new feature. So the point at which that feature is working, would be our milestone. It's a really good way to keep track of our projects and to help us work toward small goals as we add features and enhancements to our game. So let's say your initial plan for your game design is a bat that flies around on its own, and your player has to dodge it. Pretty easy to do, right? But once you have this done, then you could add extra enhancements. Examples of these could be: a time limited scoring system that resets at the end of each game, when a set amount of time has passed a menu to allow different options to be set, with each option being a separate milestone as well mulitiple levels, with the backdrop and number of bats increasing with each level bonus objects that allow the player to swat at the bats ..and so on. Here's an example of a plan I made. It's probably a bit more ambitious, and I ended up simplifying it, as some components ended up not really being required. And here's what it ended up looking like. As you progress with Scratch games, you'll start to find that you can make your initial plan a little more complicated, because you can use your previously-saved snippets to make building it easier. Just try and start with something simple as it is more satisfying to have a completed game than several projects you didn't finish because of lack of planning. I've made an infographic summary of the process here .","tags":"scratch","title":"Tips for designing your first Scratch games"},{"url":"/saving-scratch-game-states-to-cloud-data.html","text":"How do I allow users to save a game state in online Scratch? One of our Code Club kids asked this question last week. So I worked out a simple way to do this. In order for this method to work, you will need to have been upgraded from a New Scratch member to a Scratcher . This will allow you to create up to 10 cloud variables, with each able to contain 10,240 digits. During a game, we use variables to keep track of things like: the player's score what level the player is up to objects or trophies that the user might have grabbed during the game There's also some variables that are automatically set when another Scratcher plays your game, such as username. The idea would be as follows: when the game is run, the cloud data is loaded from the Scratch servers, and stored in a list. When the player hits a specific key during the game, the score, level, and other information at that point, is added to the list. Later, the list is written back to the cloud data variables, and so on. This was done pretty quickly, and made it as simple as possible to demonstrate the idea. You can look up two more complex examples at the Scratch cloud data documentation page . It's also possible grab various variables such as username from the Scratcher's profile, or encode data stored. I've left these, and apply this to a full game, as an exercise for the reader. For this tutorial, I've used just two single-digit variables, but it's not a huge leap to store multi-digit or alphabetic data fields as well. Required functions I've set up the following actions (functions): intialize: set the pointers, counters, and cloud variables to empty values load: load the data, from the cloud data variables, into a list save: overwrite the cloud variables with data from our list input: allow the user to enter 20 pairs of digits to be stored as cloud data (you could also input to the list, and then use the save action to write to cloud data) For all except the input function, I've use a custom block that is set to run in turbo mode. This makes things a bit quicker. Then custom block is called when an assigned key is pressed. This is the initalize code (the player presses i ): This is the load code (the player presses l ): This is the save code (the player presses s ): This is the input code (the player is prompted for single digits - this is only for the tutorial, since normally this would be generated by the game): Add these scripts and blocks to a single sprite and run it!","tags":"scratch","title":"Saving Scratch game states to cloud data"},{"url":"/preparing-sd-cards-for-our-code-club-robots.html","text":"Writing SD cards on Mac OS X There's a few different ways to do this on the Dexter Industries site , and this is post just shows a process that worked for the workshops we do at our Code Club. It may be useful for those running Mac OS X with homebrew installed. Homebrew is an easy way to install and manage open source software and other software, on the Mac. Install a tool to unarchive .rar files e.g. unrar: brew install unrar Unarchive the downloaded archive: unrar e 2015.03.20_Dexter_Industries_wheezy.rar Then identify which device the SD card is: Here, the SD card is at /dev/disk5 . The command to list devices is diskutil list . Do this before then after inserting the SD card to see where your device is. If the device is mounted, you need to unmount it first with umount diskutil unmountDisk /dev/disk5 You should see: Unmount of all volumes on /dev/disk5 was successful. Next, writing the SD card is performed with sudo dd bs=1m if=2015.03.20_Dexter_Industries_wheezy.img of=/dev/disk5 . The image name here was the latest version at the time, so will be different for yours. At the time of writing, it was available for download here but refer to the Dexter Industries page for the latest. Writing the SD card is performed with sudo dd bs=1m if=2015.03.20_Dexter_Industries_wheezy.img of=/dev/disk5 Now is a good time to go and grab a drink, and a quick bite to eat. On Mac OS X, you can use the control-t key combination to see the time remaining for the write. Boot it! ..and it works! Well, once you put it in the Raspberry Pi and boot it, that is. Configure, backup, then write to other SD cards Of course by this stage, you'll want to go and talk to whoever sets up the wireless, and find out how to configure your Raspberry Pi to the Code Club network. Since Raspbian for Robots is a custom version of Raspbian for Raspberry Pi , your mileage may vary at this point. Refer them to the links in this post and they should soon work it out. Or, just read up on it yourself. Once I had the SD card configured and tested, I backed-up the SD card with (replace disk5 with your device as identified above), dd if=/dev/disk5 of=backup_filename.img bs=1024 . Depending on how you set up your networking, you may just need one SD card image, or multiple set up for different IP addresses. Use the same command used to write the image the first time, but replace the original Raspbian for Robots image with the one you've just backed-up to. To simplify things when you suddently realise that it's Code Club time again, and have to grab everything and run, make sure you clearly label which SD card is which. As we do small group robots workshops, I usually try to have at least one SD card ready for each group. I also have different ones for the BrickPi and GoPiGo.","tags":"robots","title":"Preparing SD cards for our code club robots"},{"url":"/fun-times.html","text":"Redesigning our fun Although I wrote about the Python side of today's session at Code Club, it's worth talking about everything else. Since we'd had the couple of weeks off, we took this opportunity to take a breath and look at how we could get everyone excited again, and improve a few components. A few observations from previous Code Club sessions this year: It worked better when we used our round tables for Python, rather than last year's outward facing seating We ultimately wanted people to offer enough activities that kids could choose - People seemed more focussed when we had defined areas in our open plan set up for each activity People seemed more comfortable when they could see what others were doing, and not feel tethered to only one What we did today Today was set up like this: We worked together on Python (Python Challenge and Code Club activities) at a block of stand up tables Nearby, in the middle of the space, we had Spheros running through a huge made made of icy pole sticks..and sometimes all over the place too! People were designing on TinkerCAD and we looked at each other's 3d creations, and printed something Scratch projects were still progressing, and people could shift between activities so they got a more varied experience We talked about the upcoming STEM and Scratch video game competitions Although we were down a volunteer and a teacher this week, something about the excitement and choices actually seemed to make things seem more relaxed, more exciting, and actually quite a bit better focussed too.","tags":"scratch","title":"Fun times!"},{"url":"/python-progress.html","text":"Today was a great Code Club session. Some of us have been finding the Python progress a bit slow so far, with not much reward, with some concepts seemingly hard to grasp. And that's fair enough, because text-based tic tac toe, or trying to say that older adventure games are fun, really doesn't compare to the cool feedback of an iPad or the more visual games we create with Scratch. So turning it all around today, we dived into the Python level-based challenge that I came across last week. It was also a good time for it as due to other school activities, we've been away for 2 weeks. We had a new person over in the Python group, and he was working through some a Code Club Python exercise. Meanwhile, a few of us sat down and put our heads together to start solving the Python challenges programmatically. I may be painting this as a quiet, focussed session, so I'll also add that tons of stuff was going on at the time. It was pretty chaotic, and for some reason that made it more relaxed, and also awesome at the same time. Numerous times, Sphero balls would run into my feet, and elsewhere someone was printing a tiny bear. The importance of keeping our work became more obvious today, as we were able to go back and reference previous Code Club exercises to help us solve some challenges. In both Python activities, there were some good breakthroughs. We don't always get it the first time, and sometimes that's what helps us learn things. I can think of at least 20 things that didn't work today, and each time one of us would notice something, that led us to figure out the answer, and keep moving on. I got the impression that a few kids surprised themselves by solving some of the Python errors, while trying to get to the next level. Something that seemed to take away the pressure with our Python progress, was that we were fine with people moving around to spend time on whatever they wanted.At the end of the session, we'd worked as a team, and in parallel, and learned how to think on our feet, apply new concepts, and were rewarded by solving a few of the challenge levels. It's great to hear the emphatic \"YES!\" of accomplishment once again.","tags":"python","title":"Python progress"},{"url":"/scratch-stencyl-and-video-game-programming-competitions.html","text":"Game creation platforms we're currently using at our Code Club We've seen a few great games coming out of Code Club. So far we've been using Scratch but we also have a class set of Stencyl licences. Stencyl isn't covered by Code Club, but there's some lessons to get started here . Differences between Scratch and Stencyl Scratch has a simple interface, making it quite a lot easier to get started with for those who haven't programmed before. Scratch doesn't need to be installed, since you can sign up online and access it with a web browser. This is probably the best choice for kids to start coding, and the advantage of a Code Club is that there are lots of activies ready to go. Sitting with others at a Code Club can also make it easier to learn from each other, and teachers or volunteers. Scratch can also be used to control physical devices. We use Scratch for our BrickPi robot. Although both of these programming platforms are visual, Stencyl makes it easy to create larger and more complicated games, and has the advantage of allowing games to be pushed to mobile devices and app stores, including Android and iOS devices. There's also a free version to get started with, and this still allows the games to be played in a web browser, or hosted on a website. Unlike Scratch, that lets you create online and share a link to a game, putting a Stencyl game online requires some sort of web hosting. The popular Impossible Pixel game was written with Stencyl. There's some really good books available for both of these programming platforms, as well as online video tutorials on YouTube. Australian game programming competitions Since our Code Club kids are starting to create some interesting games, there's two competitions in Australia that may be interesting. Code Club Australia Scratch Day competition will have winners announced on Scratch Day, 14 May 2016, with submissions closing at 12 AM Thursday 12 May 2016. Australian STEM videogame challenge is a national competition open to all Australian students in years 5-12. Registration is open now until June 2016, with game submission from 7-19 August inclusive. These are both great opportunities for young coders who are interested in submitting their games! Click on the links above for more information. Parents' permission is required to enter these competitions.","tags":"scratch","title":"Scratch, Stencyl, and video game programming competitions"},{"url":"/setting-up-robots-for-code-club.html","text":"I thought it'd be interesting for our Code Club kids to see behind-the-scenes, and for other Code Club teachers/volunteers to see our process. Firstly, there's some really good information provided by Dexter Industries , who make these robots. I've pulled this post together from notes made at the time. This post covers the first few steps I went through last year, setting up the GoPiGo robot. Since we have done a bit more Python this year, the aim will be to program this with Python, and our BrickPi robot will be programmed in the older offline version 1.4 Scratch. Both these robots are each driven by a Raspberry Pi 1B computer, connected to Dexter Industries boards. We use 12volt battery packs to power these as well as motors and sensors. I'd recommend having them plugged in when programming, since it prevents the batteries from being used as much. One issue I had with the BrickPi out of the box, was that the power connector for the BrickPi board was connected with reversed polarity. This was obvious when the batteries became really hot as soon as they were connected. Quickly disconnecting the battery pack, I checked the documentation and once I had corrected the polarity, everything operated correctly. Anyway I'm getting ahead of myself. Last year we bought a BrickPi board to control our existing Lego EV3 motors with Scratch and Python. The grade 6 kids were divided into teams for a number of robot workshops. In this era of many distractions, a simple inforgraphic was a good way to show a high-level idea of how it all sits together with the BrickPi. An issue with setting up VNC at the time was fixed using this . Since then, Dexter Industries have implemented an easier way to connect to the BrickPi and GoPiGo via the browser. For the workshops, we started by looking at the example Scratch code that comes with the Dexter Industries robot operating system (robotOS; a modded version of Raspbian). From this, we would discover what 'broadcasts' need to be sent from Scratch to the Python script in order to: move forward and back turn left and right using a few different methods stop and start One script that comes with robotOS is the 'car' script, which allows the robot to be controlled from the keyboard. Since our BrickPi motors are mounted upside-down for a lower centre of gravity, the first task was usually to correct the forward and backward controls. Lessons we'd learned with Scratch activities come in handy when we look at replacing the interactive controls to use a script to control them. Once we got to this stage, we needed to read data from the EV3 sensors. This was a bit of a problem as we were never able to get the sensors working properly. Over the holidays, I looked into this and found that we needed a firmware upgrade for the BrickPi to use the EV3 sensors. Again, a script on robotOS assisted with checking the firmware version. After successfully doing the firmware upgrade on the BrickPi, it became apparent that the Python script, that listened to our Scratch broadcasts, was only sending the commands for the older Lego Mindstorms motors. Looking further into this, I found the required commands in some other example scripts on robotOS, and added these to an modded version of the original Python script. Since I've been pulling this together from my notes, I'm gradually adding to this post as I go. As other Code Club volunteers and STEM teachers can probably attest to, it is not uncommon to get something working the night before a session, and updating documentation at odd hours. Take this as a rather live blog in that sense...","tags":"robots","title":"Setting up robots for Code Club"},{"url":"/exciting-scratch-projects-are-happening.html","text":"Over the last couple of weeks, I've been able to see a few great Scratch projects that are being build at our Code Club! This year it was great to have everyone sign up to Scratch before our Code Club started again at the start of this year. By doing this, it meant that we were mostly all working online, which gave people the opportunity to keep working on things at home, rather than waiting for the next Code Club. A few of us had already started playing around with Scratch before Term 1, and some of use has also been using Scratch previous in grade 4 classes. Even though term 1 was a bit shorter than the others, we were still able to get a few activies under our belts. I tried to choose some of the ones I remembered as being popular and interesting last year. Starting off with Lost in Space, was a good introduction as it teaches about positioning, rotating, moving, and resizing sprites. In simple terms, sprites are images that we can move around, make appear and disappear, collide with one another, and many other actions. After a few weeks and few more activities, the Scratch kids got a chance to make their own game. Interestingly, when I asked who had already had a go at making their own games, several people put their hands up. One of our members had already made a complete game which he demoed to the group, having another member very eager to volunteer to try the game. At this stage, everyone was pretty keen to get started. This involved working in pairs or solo, desiging the basic game on paper. It was interesting to learn more as we came across problems to be solved, while completing our goals. We continued working on our games on the first week back after holidays. It was great to see that quite a few people working on their projects before coming back to school. One pretty awesome game I saw had multiple levels and was completely finished! Although we having a break this week, next week we'll be right back at it, and it'll be interesting to see what people have come up with. We're trying to keep track of where everyone is, and hopefully we can help each other to get lots of projects completed so that we can showcase these to friends soon. I will be good to get some screenshots online as well.","tags":"scratch","title":"Exciting Scratch projects are happening"},{"url":"/python-level-based-challenges.html","text":"Looking through various Python tutorials that are online for kids, I can kind of see why some of the initial rewards can seem 'boring' to kids who are being lured by the pretty graphics and animations of modern tablets. Coding challenges and Capture The Flag (CTF) team competitions have always seemed a bit more exciting than talking about text-adventures sometimes. Although we're probably not up to CTFs or the Google coding challenges that are running, I came across a fun level-based Python challenge , written by Nadav Sanet , that just happens to align quite well with our Code Club activities. ;) The idea behind this particular challenge is: solve the problem by writing a Python script get to the next level web page solve the next problem ...and so on. I reckon this will be loads more fun because writing the script actually leads to progression in the game itself! It also lends itself to teamwork, and I can drop clues as we go. Hopefully this will be tons more satisfying to work through from week to week, and will also get us thinking a lot more to solve a problem and see how far we can get. Last year we had some good competition building up between groups working on the robots, and with our quiz. This may help tap into that energy again, while showing how various components work together. So before we start, here's a screenshot: I'll let you know how it goes... :)","tags":"python","title":"Python level-based challenges"},{"url":"/spyder-python-ide.html","text":"Tools for writing Python An Integrated Development Environment (IDE) is software that integrates tools for programming. As we've seen, for Code Club, the basic tools we need for kids to program in Python are (assuming we've install Python): - a Python shell to try out commands with immediate feedback - an editor, with a simple interface, to create Python scripts containing our code - an environment to run our scripts that gives us errors when we make mistakes Other features, I see as optional, but useful include: - syntax highlighting, where our code is colour coded to make formatting mistakes more obvious when editing; - auto-completion, where the editor helps us a bit by suggesting commands that might be useful (I think this can be a little confusing when just starting); and - a debugging interface that can let us stop, or single-step, our code while it is running, so we can find where our script might be going wrong. Our first experiences at Code Club When we first started doing Python activities, the main problem that came up was kids getting confused as to whether they were in a Python shell, editing, or running their code. Once we explained that their script was just a text file, and that they could edit it in something as simple as notepad, things became a little easier. Some of us had a bit of an issue with typing things out, so it was good to run code often and see things happening. Some of us preferred Windows and some preferred MacOSX. That's where the Python cheat sheet (see the link above) came from. Something to try As we have a mixture of netbooks, macbooks, and imacs, and 3 Raspberry Pis, the environment we've been writing our code in varies. Being a bit of a nerd, in an effort to make sure we at least do something during our Code Club session, I'll often just use whatever text editor I can find to write Python. Sometimes this includes the nano editor, which I'm sure everyone gets a bit frustrated with, but I firmly believe will help us be more adaptable when we don't have a pretty graphical interface. I'm sure this drives people a bit mad ;) but hopefully it's all good when the code eventually runs :). After all this rambling on, the main point is that I tried the Spyder Python IDE (Scientific PYthon Development EnviRonment) recently, and it seems close to what we need. Personally I like things like Wing IDE but for teaching kids we just need something simple, where they get the main tools listed above. Spyder seems to run on the operating systems we encounter, and unlike some of the other tools, has a more intuitive interface for kids. It also has syntax highlighting and tells them what version of Python they are using. To me, it's important that people have a tool they can use install and use at home, since Code Club is only one hour a week for us. Anyway, it looks like this: If you'd like to try it, there's instructions for installing Spyder version 2 here","tags":"python","title":"Spyder Python IDE"},{"url":"/keeping-what-youve-learned.html","text":"I used to scribble a ton of stuff in the back of one of my old Commodore64 manuals. Whenever I'd find something cool in a magazine or book, or later, text files, I'd scrawl it in. There was something about it being a bit messy that made it easier to remember. These days, there's a ton of different ways to do that online or in files, but most smart coders I know just go and look up their own code. i.e. things they've done previously. One of the coolest things about working out a good way to do something in code, is that you can go back whenever you need to do that. A classic example could be a script that reads lines from a file and makes some change to every line, before writing out a new file. That's the type of thing that you'd probably find yourself wanting to do for lots of scripts, so you'd probably keep that script. You'll probably keep improving the script as you get better at coding and come across more 'gotchas' that can be avoided by wrinting better code. Another way of remembering things is to recognise and remember patterns, or idioms. Idiomatic Python has been a really good reference for getting things done in Python, using consistent and practical structure. It's not the only way to do things, but has some logic reasoning behind it. Although there's a ton of information on the Internet, there's also a lot of bad information, so you really have to sift through to find the good information. And before you ask questions on forums or places like Stack Overflow , make sure you've put some effort in and done some hard searching first. People tend to help those who put in the work, rather than those who ask before trying. And if this doesn't work, sometimes the edited structure of a good book can be very helpful as well. Something that will also help, is to just keep at it. Forcing yourself to push through tough problems and finishing projects will really train your brain and make things a lot easier to learn in the future. Collaborating can also be a great way to learn, since the load is spread over more than one person, and decisions are sometime easier to make as a group.","tags":"python","title":"Keeping what you've learned"},{"url":"/moving-from-scratch-to-python.html","text":"So going from visual programming like Scratch to a text-based language can intially seem a bit lame. Yep, that makes sense to me. We've just gone from something that lets us drag blocks into a window with spinning monkeys and bouncing balls, to...typing words, that makes a few words come up on the screen, or draws a boring star. The other thing that made this change kind of suck, is that things don't work nearly as easily as Scratch does, at first. So some of the annoying things that have slowed us down include: laptops having the wrong version of Python on them, so we had to change our code or the commands to run things IDLE being confusing or not running having to edit things with weird editors AND WHAT ARE THESE CRAZY ERRORS!!!?!??? Scratch didn't have these!!! Our grand plan is that we have a heap of different activities running at one, and people can choose what they want to do. The only thing we need to remember with that plan is that we need to show parents and teachers that we're making cool stuff, learning, and having fun. So keeping this in mind, we wouldn't be going through all of this if Python wasn't helping us make cool stuff and having even more fun...eventually. It's pretty easy to do fun stuff with Scratch because we move things and see if the collide.. and w00t we have a game! And even though we can use Scratch to do things like robots, and make lights go on, there are limitations. We have Stencyl, but more about that in a later post ;) As for Python, even some teachers have been asking what it can do. We know it can do crazy things that seem a long way from our simple scripts, but here's some uses that only require simple scripts: read web pages and extract information we want, then do things with it make a script that waits for something to happen, say if someone triggers a sensor or touches your computer, lock them out andrecord them with a camera and then email it to you make robots do interesting things, like stream video to a website, balance on 2 wheels, detect faces, analyse writing from a photo and speak it, understand its surroundings and avoid or pick up objects create chat bots that pretend to be human and interact with social media automate repetitive tasks, such as renaming lots of files, or converting large amounts of audio files to another format, or sorting and converting videos based on a particular attribute such as date or name decode information from radio signals, such as airplane coordinates, and plot them on google earth extract geographical information from photos and see where someone has been at given times this blog uses software written in Python to generate all the web pages among some of the software built with Python are some great artificial intellingence tools that can be integrated into other projects To sort out the details of trying out commands, editing, and running out Python, I put together an updated-from-the-other-day cheatsheet A big advantage of learning to code in Python is that we don't have to worry about a lot of complicated syntax (rules for formatting the code) or extra code to make it work. It runs on many more things than Scratch does, and can do much more complicated work and still have simple, readable code. And once we know a bit about Python, there's a whole lot of extra modules available Understanding a programming language means you can have an idea, but actually make it.","tags":"python","title":"Moving from Scratch to Python"},{"url":"/cloning-sprites.html","text":"Someone asked me about duplicating a ball, that would drop down for the game character to dodge.. One of the concepts we looked at last year in Code Club, was creating lots of instances of one sprite. In the simple zombie game I made, this was an easy way to spawn a ton of zombies as the game progresses. At first, the obvious way to do that is by creating lots of sprites. But that's probably a bit too much work. Boooo!! An easier way would be: If something happens, clone a sprite. When a clone is created, do things (like make balls move downwards until they hit something). An activity I looked at for Code Club last year uses clones. It's called Catch the Dots . The game itself is pretty good fun to play too! As for doing gravity to make things fall, Al Sweigart explains it really well in his series, InventWithScratch: Oh, and did you notice that he has a cool tip for running certain parts really fast?","tags":"scratch","title":"Cloning sprites"},{"url":"/term-1-python-roundup.html","text":"In term 1, grade 6 people who were in Code Club last year, went through some Python concepts. The activities we had a go at were: Using a text editor e.g. notepad, in Windows, we went through the inventwithpython guess the number exercise. We discovered that the Macbooks' Windows defaulted to Python 2, which we later fixed by running our scripts from the cmd prompt using: py -3 <ourfile.py> . Some people had a go at copying and pasting the code and soon found out that this changed formatting as well as copying the line numbers. In some ways, this was more work because line numbers had to be taken out, indenting had to be restored, and carriage returns needed to be re-added. Our Python coding (development) environment at this stage consists of: A Python shell that allows us to type in interactive Python commands, to see how things work before putting commands into a script. Later this was especially useful when using the Python turtle module. A text editor. We used text editors because, previously, we'd had varying success with IDLE and Tinker. It was a little confusing to easily see the difference between the editor and shell when loading scripts in IDLE. In Windows we used notepad because it's already there, in OSX we used nano from the terminal. Nano was useful when we later connected to the Raspberry Pi using ssh to build things with Python Minecraft Pi module functions. This is also useful since we also have some robots that we run with model 1B Raspberry Pis. A command shell/window. We ran out scripts after running cmd.exe to get a command window. Later we found that it was easier to just save our scripts, but keep them in the editor, so that we could easily make changes to fix errors or add different code. Code Club turtle activities. This time we discovered that the netbooks running Windows did not have Python3 at all. So we ended up trying to do things in the Python shell, but it was a frustrating session. A few of us ran some of the turtle scripts, which didn't need Python3. The initial idea of this session was to build on the previous 'guess the number' activity by adding loops and introducing the concepts of: Don't repeat yourself(DRY). This means trying to write efficient code, using structures such as loops, to repeat the same commands. Functions. This is part of DRY. Troubleshooting errors. I think we needed to get started quicker. This worked better in the next session. Continued Code Club Turtle activities. We were one teacher down for this one in the later part of the session. Things worked better because we sat on a round table and I think it was easier to talk to everyone to get things working. I think we all got multiple stars drawing this time, with some people opting to use OSX, which was easier. Some things we looked at were: The basic idea that we our scripts are starting to have: An initialistion section. We set up things like variables here. This was easy to remember by talking about what happens when we don't reset our score when re-running a Scratch game. Function definitions. Main, which usually contains our commands or main loop that controls everything, and where we call functions we created. Functions. We looked at the ideas of: Built-in functions that come with Python Functions that we can import from modules User-defined functions that we define ourselves. Adding parameters to change how our user-defined functions work. An example of how we define our own Python function could be: def star (): for i in range ( 6 ): forward ( 100 ) right ( 120 ) Then this would give us a star() command that we could use to draw a star without typing all those lines. Later we looked at adding parameters so we could tell the function how big, or what colour to draw the star with. At a later stage we'll look at functions that can 'return' information to us when called. Using a Raspberry Pi computer and connecting with ssh and the OSX terminal, we examined, ran, and edited Python scripts to try and build a building in Minecraft Pi.","tags":"python","title":"Term 1 Python roundup"}]}