{"pages":[{"url":"/pages/about-this-blog.html","text":"Since we Code Club is only once a week, this blog is a way to provide more detail than can be covered in each session. Hopefully the extra information helps those keen to learn more, and are excited to work on even more interesting projects.","tags":"pages","title":"About this blog"},{"url":"/pages/code-club-python-environment-cheat-sheet.html","text":"Last year our Code Club attempts with Python and IDLE were a bit frustrating. Well more frustrating than this year at least :). I noticed that a few things were a bit hard to read and didn't show up properly, so I've fixed those. So put this cheat sheet next to you while going through the Code Club Python activities. It relates to MacOSX, Windows, or Linux (we've used Raspberry Pis for our Dexter Industries BrickPi EV3, GoPiGo, and Minecraft Python sessions). Our environment uses three windows in MacOS and Windows: a text editor Python shell commandline terminal There's also some cool tricks for having multiple windows when connecting to Linux with ssh, which will get to in a later post! The cheatsheet gives examples to make us able to edit and run out Python in different environments. For those who didn't really manage to get much done during our noisy Code Clubs, or something just didn't work, have another go at home when it's quiet. As a few keen people have done, you can download Python 3 from https://python.org. That's probably the easiest to use. It also covers running your scripts. I think we're slowly getting better at troubleshooting Python errors :) I've put the updated cheat sheet here","tags":"pages","title":"Code Club Python environment cheat sheet"},{"url":"/keeping-what-youve-learned.html","text":"I used to scribble a ton of stuff in the back of one of my old Commodore64 manuals. Whenever I'd find something cool in a magazine or book, or later, text files, I'd scrawl it in. There was something about it being a bit messy that made it easier to remember. These days, there's a ton of different ways to do that online or in files, but most smart coders I know just go and look up their own code. i.e. things they've done previously. One of the coolest things about working out a good way to do something in code, is that you can go back whenever you need to do that. A classic example could be a script that reads lines from a file and makes some change to every line, before writing out a new file. That's the type of thing that you'd probably find yourself wanting to do for lots of scripts, so you'd probably keep that script. You'll probably keep improving the script as you get better at coding and come across more 'gotchas' that can be avoided by wrinting better code. Another way of remembering things is to recognise and remember patterns, or idioms. Idiomatic Python has been a really good reference for getting things done in Python, using consistent and practical structure. It's not the only way to do things, but has some logic reasoning behind it. Although there's a ton of information on the Internet, there's also a lot of bad information, so you really have to sift through to find the good information. And before you ask questions on forums or places like Stack Overflow , make sure you've put some effort in and done some hard searching first. People tend to help those who put in the work, rather than those who ask before trying. And if this doesn't work, sometimes the edited structure of a good book can be very helpful as well. Something that will also help, is to just keep at it. Forcing yourself to push through tough problems and finishing projects will really train your brain and make things a lot easier to learn in the future. Collaborating can also be a great way to learn, since the load is spread over more than one person, and decisions are sometime easier to make as a group.","tags":"python","title":"Keeping what you've learned"},{"url":"/moving-from-scratch-to-python.html","text":"So going from visual programming like Scratch to a text-based language can intially seem a bit lame. Yep, that makes sense to me. We've just gone from something that lets us drag blocks into a window with spinning monkeys and bouncing balls, to...typing words, that makes a few words come up on the screen, or draws a boring star. The other thing that made this change kind of suck, is that things don't work nearly as easily as Scratch does, at first. So some of the annoying things that have slowed us down include: laptops having the wrong version of Python on them, so we had to change our code or the commands to run things IDLE being confusing or not running having to edit things with weird editors AND WHAT ARE THESE CRAZY ERRORS!!!?!??? Scratch didn't have these!!! Our grand plan is that we have a heap of different activities running at one, and people can choose what they want to do. The only thing we need to remember with that plan is that we need to show parents and teachers that we're making cool stuff, learning, and having fun. So keeping this in mind, we wouldn't be going through all of this if Python wasn't helping us make cool stuff and having even more fun...eventually. It's pretty easy to do fun stuff with Scratch because we move things and see if the collide.. and w00t we have a game! And even though we can use Scratch to do things like robots, and make lights go on, there are limitations. We have Stencyl, but more about that in a later post ;) As for Python, even some teachers have been asking what it can do. We know it can do crazy things that seem a long way from our simple scripts, but here's some uses that only require simple scripts: read web pages and extract information we want, then do things with it make a script that waits for something to happen, say if someone triggers a sensor or touches your computer, lock them out andrecord them with a camera and then email it to you make robots do interesting things, like stream video to a website, balance on 2 wheels, detect faces, analyse writing from a photo and speak it, understand its surroundings and avoid or pick up objects create chat bots that pretend to be human and interact with social media automate repetitive tasks, such as renaming lots of files, or converting large amounts of audio files to another format, or sorting and converting videos based on a particular attribute such as date or name decode information from radio signals, such as airplane coordinates, and plot them on google earth extract geographical information from photos and see where someone has been at given times this blog uses software written in Python to generate all the web pages among some of the software built with Python are some great artificial intellingence tools that can be integrated into other projects To sort out the details of trying out commands, editing, and running out Python, I put together an updated-from-the-other-day cheatsheet A big advantage of learning to code in Python is that we don't have to worry about a lot of complicated syntax (rules for formatting the code) or extra code to make it work. It runs on many more things than Scratch does, and can do much more complicated work and still have simple, readable code. And once we know a bit about Python, there's a whole lot of extra modules available Understanding a programming language means you can have an idea, but actually make it.","tags":"python","title":"Moving from Scratch to Python"},{"url":"/cloning-sprites.html","text":"Someone asked me about duplicating a ball, that would drop down for the game character to dodge.. One of the concepts we looked at last year in Code Club, was creating lots of instances of one sprite. In the simple zombie game I made, this was an easy way to spawn a ton of zombies as the game progresses. At first, the obvious way to do that is by creating lots of sprites. But that's probably a bit too much work. Boooo!! An easier way would be: If something happens, clone a sprite. When a clone is created, do things (like make balls move downwards until they hit something). An activity I looked at for Code Club last year uses clones. It's called Catch the Dots . The game itself is pretty good fun to play too! As for doing gravity to make things fall, Al Sweigart explains it really well in his series, InventWithScratch: Oh, and did you notice that he has a cool tip for running certain parts really fast?","tags":"scratch","title":"Cloning sprites"},{"url":"/term-1-python-roundup.html","text":"In term 1, grade 6 people who were in Code Club last year, went through some Python concepts. The activities we had a go at were: Using a text editor e.g. notepad, in Windows, we went through the inventwithpython guess the number exercise. We discovered that the Macbooks' Windows defaulted to Python 2, which we later fixed by running our scripts from the cmd prompt using: py -3 <ourfile.py> . Some people had a go at copying and pasting the code and soon found out that this changed formatting as well as copying the line numbers. In some ways, this was more work because line numbers had to be taken out, indenting had to be restored, and carriage returns needed to be re-added. Our Python coding (development) environment at this stage consists of: A Python shell that allows us to type in interactive Python commands, to see how things work before putting commands into a script. Later this was especially useful when using the Python turtle module. A text editor. We used text editors because, previously, we'd had varying success with IDLE and Tinker. It was a little confusing to easily see the difference between the editor and shell when loading scripts in IDLE. In Windows we used notepad because it's already there, in OSX we used nano from the terminal. Nano was useful when we later connected to the Raspberry Pi using ssh to build things with Python Minecraft Pi module functions. This is also useful since we also have some robots that we run with model 1B Raspberry Pis. A command shell/window. We ran out scripts after running cmd.exe to get a command window. Later we found that it was easier to just save our scripts, but keep them in the editor, so that we could easily make changes to fix errors or add different code. Code Club turtle activities. This time we discovered that the netbooks running Windows did not have Python3 at all. So we ended up trying to do things in the Python shell, but it was a frustrating session. A few of us ran some of the turtle scripts, which didn't need Python3. The initial idea of this session was to build on the previous 'guess the number' activity by adding loops and introducing the concepts of: Don't repeat yourself(DRY). This means trying to write efficient code, using structures such as loops, to repeat the same commands. Functions. This is part of DRY. Troubleshooting errors. I think we needed to get started quicker. This worked better in the next session. Continued Code Club Turtle activities. We were one teacher down for this one in the later part of the session. Things worked better because we sat on a round table and I think it was easier to talk to everyone to get things working. I think we all got multiple stars drawing this time, with some people opting to use OSX, which was easier. Some things we looked at were: The basic idea that we our scripts are starting to have: An initialistion section. We set up things like variables here. This was easy to remember by talking about what happens when we don't reset our score when re-running a Scratch game. Function definitions. Main, which usually contains our commands or main loop that controls everything, and where we call functions we created. Functions. We looked at the ideas of: Built-in functions that come with Python Functions that we can import from modules User-defined functions that we define ourselves. Adding parameters to change how our user-defined functions work. An example of how we define our own Python function could be: def star (): for i in range ( 6 ): forward ( 100 ) right ( 120 ) Then this would give us a star() command that we could use to draw a star without typing all those lines. Later we looked at adding parameters so we could tell the function how big, or what colour to draw the star with. At a later stage we'll look at functions that can 'return' information to us when called. Using a Raspberry Pi computer and connecting with ssh and the OSX terminal, we examined, ran, and edited Python scripts to try and build a building in Minecraft Pi.","tags":"python","title":"Term 1 Python roundup"}]}