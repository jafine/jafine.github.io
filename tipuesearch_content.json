{"pages":[{"url":"/pages/about-this-blog.html","text":"Since we Code Club is only once a week, this blog is a way to provide more detail than can be covered in each session. Hopefully the extra information helps those keen to learn more, and are excited to work on even more interesting projects.","tags":"pages","title":"About this blog"},{"url":"/pages/code-club-python-environment-cheat-sheet.html","text":"Last year our Code Club attempts with Python and IDLE were a bit frustrating. Well more frustrating than this year at least :). I noticed that a few things were a bit hard to read and didn't show up properly, so I've fixed those. So put this cheat sheet next to you while going through the Code Club Python activities. It relates to MacOSX, Windows, or Linux (we've used Raspberry Pis for our Dexter Industries BrickPi EV3, GoPiGo, and Minecraft Python sessions). Our environment uses three windows in MacOS and Windows: a text editor Python shell commandline terminal There's also some cool tricks for having multiple windows when connecting to Linux with ssh, which will get to in a later post! The cheatsheet gives examples to make us able to edit and run out Python in different environments. For those who didn't really manage to get much done during our noisy Code Clubs, or something just didn't work, have another go at home when it's quiet. As a few keen people have done, you can download Python 3 from https://python.org. That's probably the easiest to use. It also covers running your scripts. I think we're slowly getting better at troubleshooting Python errors :) I've put the updated cheat sheet here","tags":"pages","title":"Code Club Python environment cheat sheet"},{"url":"/saving-scratch-game-states-to-cloud-data.html","text":"How do I allow users to save a game state in online Scratch? One of our Code Club kids asked this question last week. So I worked out a simple way to do this. In order for this method to work, you will need to have been upgraded from a New Scratch member to a Scratcher . This will allow you to create up to 10 cloud variables, with each able to contain 10,240 digits. This was done pretty quickly, and made it as simple as possible to demonstrate the idea. You can look up two more complex examples at the Scratch cloud data documentation page . It's also possible grab various variables such as username from the user's profile, or encode data stored. I've left these as an exercise for the reader. For this tutorial, I've used just two single-digit variables, but it's not a huge leap to store multi-digit or alphabetic data fields as well. Required functions I've set up the following actions (functions): intialize: set the pointers, counters, and cloud variables to empty values load: load the data, from the cloud data variables, into a list save: overwrite the cloud variables with data from our list input: allow the user to enter 20 pairs of digits to be stored as cloud data (you could also input to the list, and then use the save action to write to cloud data) For all except the input function, I've use a custom block that is set to run in turbo mode. This makes things a bit quicker. Then custom block is called when an assigned key is pressed. This is the initalize code (the user presses i ): This is the load code (the user presses l ): This is the save code (the user presses s ): This is the input code (the user is prompted for single digits): Add these scripts and blocks to a single sprite and run it!","tags":"scratch","title":"Saving Scratch game states to cloud data"},{"url":"/preparing-sd-cards-for-our-code-club-robots.html","text":"Writing SD cards on Mac OS X There's a few different ways to do this on the Dexter Industries site , and this is post just shows a process that worked for the workshops we do at our Code Club. It may be useful for those running Mac OS X with homebrew installed. Homebrew is an easy way to install and manage open source software and other software, on the Mac. Install a tool to unarchive .rar files e.g. unrar: brew install unrar Unarchive the downloaded archive: unrar e 2015.03.20_Dexter_Industries_wheezy.rar Then identify which device the SD card is: Here, the SD card is at /dev/disk5 . The command to list devices is diskutil list . Do this before then after inserting the SD card to see where your device is. If the device is mounted, you need to unmount it first with umount diskutil unmountDisk /dev/disk5 You should see: Unmount of all volumes on /dev/disk5 was successful. Next, writing the SD card is performed with sudo dd bs=1m if=2015.03.20_Dexter_Industries_wheezy.img of=/dev/disk5 . The image name here was the latest version at the time, so will be different for yours. At the time of writing, it was available for download here but refer to the Dexter Industries page for the latest. Writing the SD card is performed with sudo dd bs=1m if=2015.03.20_Dexter_Industries_wheezy.img of=/dev/disk5 Now is a good time to go and grab a drink, and a quick bite to eat. On Mac OS X, you can use the control-t key combination to see the time remaining for the write. Boot it! ..and it works! Well, once you put it in the Raspberry Pi and boot it, that is. Configure, backup, then write to other SD cards Of course by this stage, you'll want to go and talk to whoever sets up the wireless, and find out how to configure your Raspberry Pi to the Code Club network. Since Raspbian for Robots is a custom version of Raspbian for Raspberry Pi , your mileage may vary at this point. Refer them to the links in this post and they should soon work it out. Or, just read up on it yourself. Once I had the SD card configured and tested, I backed-up the SD card with (replace disk5 with your device as identified above), dd if=/dev/disk5 of=backup_filename.img bs=1024 . Depending on how you set up your networking, you may just need one SD card image, or multiple set up for different IP addresses. Use the same command used to write the image the first time, but replace the original Raspbian for Robots image with the one you've just backed-up to. To simplify things when you suddently realise that it's Code Club time again, and have to grab everything and run, make sure you clearly label which SD card is which. As we do small group robots workshops, I usually try to have at least one SD card ready for each group. I also have different ones for the BrickPi and GoPiGo.","tags":"robots","title":"Preparing SD cards for our code club robots"},{"url":"/fun-times.html","text":"Redesigning our fun Although I wrote about the Python side of today's session at Code Club, it's worth talking about everything else. Since we'd had the couple of weeks off, we took this opportunity to take a breath and look at how we could get everyone excited again, and improve a few components. A few observations from previous Code Club sessions this year: It worked better when we used our round tables for Python, rather than last year's outward facing seating We ultimately wanted people to offer enough activities that kids could choose - People seemed more focussed when we had defined areas in our open plan set up for each activity People seemed more comfortable when they could see what others were doing, and not feel tethered to only one What we did today Today was set up like this: We worked together on Python (Python Challenge and Code Club activities) at a block of stand up tables Nearby, in the middle of the space, we had Spheros running through a huge made made of icy pole sticks..and sometimes all over the place too! People were designing on TinkerCAD and we looked at each other's 3d creations, and printed something Scratch projects were still progressing, and people could shift between activities so they got a more varied experience We talked about the upcoming STEM and Scratch video game competitions Although we were down a volunteer and a teacher this week, something about the excitement and choices actually seemed to make things seem more relaxed, more exciting, and actually quite a bit better focussed too.","tags":"scratch","title":"Fun times!"},{"url":"/python-progress.html","text":"Today was a great Code Club session. Some of us have been finding the Python progress a bit slow so far, with not much reward, with some concepts seemingly hard to grasp. And that's fair enough, because text-based tic tac toe, or trying to say that older adventure games are fun, really doesn't compare to the cool feedback of an iPad or the more visual games we create with Scratch. So turning it all around today, we dived into the Python level-based challenge that I came across last week. It was also a good time for it as due to other school activities, we've been away for 2 weeks. We had a new person over in the Python group, and he was working through some a Code Club Python exercise. Meanwhile, a few of us sat down and put our heads together to start solving the Python challenges programmatically. I may be painting this as a quiet, focussed session, so I'll also add that tons of stuff was going on at the time. It was pretty chaotic, and for some reason that made it more relaxed, and also awesome at the same time. Numerous times, Sphero balls would run into my feet, and elsewhere someone was printing a tiny bear. The importance of keeping our work became more obvious today, as we were able to go back and reference previous Code Club exercises to help us solve some challenges. In both Python activities, there were some good breakthroughs. We don't always get it the first time, and sometimes that's what helps us learn things. I can think of at least 20 things that didn't work today, and each time one of us would notice something, that led us to figure out the answer, and keep moving on. I got the impression that a few kids surprised themselves by solving some of the Python errors, while trying to get to the next level. Something that seemed to take away the pressure with our Python progress, was that we were fine with people moving around to spend time on whatever they wanted.At the end of the session, we'd worked as a team, and in parallel, and learned how to think on our feet, apply new concepts, and were rewarded by solving a few of the challenge levels. It's great to hear the emphatic \"YES!\" of accomplishment once again.","tags":"python","title":"Python progress"},{"url":"/scratch-stencyl-and-video-game-programming-competitions.html","text":"Game creation platforms we're currently using at our Code Club We've seen a few great games coming out of Code Club. So far we've been using Scratch but we also have a class set of Stencyl licences. Stencyl isn't covered by Code Club, but there's some lessons to get started here . Differences between Scratch and Stencyl Scratch has a simple interface, making it quite a lot easier to get started with for those who haven't programmed before. Scratch doesn't need to be installed, since you can sign up online and access it with a web browser. This is probably the best choice for kids to start coding, and the advantage of a Code Club is that there are lots of activies ready to go. Sitting with others at a Code Club can also make it easier to learn from each other, and teachers or volunteers. Scratch can also be used to control physical devices. We use Scratch for our BrickPi robot. Although both of these programming platforms are visual, Stencyl makes it easy to create larger and more complicated games, and has the advantage of allowing games to be pushed to mobile devices and app stores, including Android and iOS devices. There's also a free version to get started with, and this still allows the games to be played in a web browser, or hosted on a website. Unlike Scratch, that lets you create online and share a link to a game, putting a Stencyl game online requires some sort of web hosting. The popular Impossible Pixel game was written with Stencyl. There's some really good books available for both of these programming platforms, as well as online video tutorials on YouTube. Australian game programming competitions Since our Code Club kids are starting to create some interesting games, there's two competitions in Australia that may be interesting. Code Club Australia Scratch Day competition will have winners announced on Scratch Day, 14 May 2016, with submissions closing at 12 AM Thursday 12 May 2016. Australian STEM videogame challenge is a national competition open to all Australian students in years 5-12. Registration is open now until June 2016, with game submission from 7-19 August inclusive. These are both great opportunities for young coders who are interested in submitting their games! Click on the links above for more information. Parents' permission is required to enter these competitions.","tags":"scratch","title":"Scratch, Stencyl, and video game programming competitions"},{"url":"/setting-up-robots-for-code-club.html","text":"I thought it'd be interesting for our Code Club kids to see behind-the-scenes, and for other Code Club teachers/volunteers to see our process. Firstly, there's some really good information provided by Dexter Industries , who make these robots. I've pulled this post together from notes made at the time. This post covers the first few steps I went through last year, setting up the GoPiGo robot. Since we have done a bit more Python this year, the aim will be to program this with Python, and our BrickPi robot will be programmed in the older offline version 1.4 Scratch. Both these robots are each driven by a Raspberry Pi 1B computer, connected to Dexter Industries boards. We use 12volt battery packs to power these as well as motors and sensors. I'd recommend having them plugged in when programming, since it prevents the batteries from being used as much. One issue I had with the BrickPi out of the box, was that the power connector for the BrickPi board was connected with reversed polarity. This was obvious when the batteries became really hot as soon as they were connected. Quickly disconnecting the battery pack, I checked the documentation and once I had corrected the polarity, everything operated correctly. Anyway I'm getting ahead of myself. Last year we bought a BrickPi board to control our existing Lego EV3 motors with Scratch and Python. The grade 6 kids were divided into teams for a number of robot workshops. In this era of many distractions, a simple inforgraphic was a good way to show a high-level idea of how it all sits together with the BrickPi. An issue with setting up VNC at the time was fixed using this . Since then, Dexter Industries have implemented an easier way to connect to the BrickPi and GoPiGo via the browser. For the workshops, we started by looking at the example Scratch code that comes with the Dexter Industries robot operating system (robotOS; a modded version of Raspbian). From this, we would discover what 'broadcasts' need to be sent from Scratch to the Python script in order to: move forward and back turn left and right using a few different methods stop and start One script that comes with robotOS is the 'car' script, which allows the robot to be controlled from the keyboard. Since our BrickPi motors are mounted upside-down for a lower centre of gravity, the first task was usually to correct the forward and backward controls. Lessons we'd learned with Scratch activities come in handy when we look at replacing the interactive controls to use a script to control them. Once we got to this stage, we needed to read data from the EV3 sensors. This was a bit of a problem as we were never able to get the sensors working properly. Over the holidays, I looked into this and found that we needed a firmware upgrade for the BrickPi to use the EV3 sensors. Again, a script on robotOS assisted with checking the firmware version. After successfully doing the firmware upgrade on the BrickPi, it became apparent that the Python script, that listened to our Scratch broadcasts, was only sending the commands for the older Lego Mindstorms motors. Looking further into this, I found the required commands in some other example scripts on robotOS, and added these to an modded version of the original Python script. Since I've been pulling this together from my notes, I'm gradually adding to this post as I go. As other Code Club volunteers and STEM teachers can probably attest to, it is not uncommon to get something working the night before a session, and updating documentation at odd hours. Take this as a rather live blog in that sense...","tags":"robots","title":"Setting up robots for Code Club"},{"url":"/exciting-scratch-projects-are-happening.html","text":"Over the last couple of weeks, I've been able to see a few great Scratch projects that are being build at our Code Club! This year it was great to have everyone sign up to Scratch before our Code Club started again at the start of this year. By doing this, it meant that we were mostly all working online, which gave people the opportunity to keep working on things at home, rather than waiting for the next Code Club. A few of us had already started playing around with Scratch before Term 1, and some of use has also been using Scratch previous in grade 4 classes. Even though term 1 was a bit shorter than the others, we were still able to get a few activies under our belts. I tried to choose some of the ones I remembered as being popular and interesting last year. Starting off with Lost in Space, was a good introduction as it teaches about positioning, rotating, moving, and resizing sprites. In simple terms, sprites are images that we can move around, make appear and disappear, collide with one another, and many other actions. After a few weeks and few more activities, the Scratch kids got a chance to make their own game. Interestingly, when I asked who had already had a go at making their own games, several people put their hands up. One of our members had already made a complete game which he demoed to the group, having another member very eager to volunteer to try the game. At this stage, everyone was pretty keen to get started. This involved working in pairs or solo, desiging the basic game on paper. It was interesting to learn more as we came across problems to be solved, while completing our goals. We continued working on our games on the first week back after holidays. It was great to see that quite a few people working on their projects before coming back to school. One pretty awesome game I saw had multiple levels and was completely finished! Although we having a break this week, next week we'll be right back at it, and it'll be interesting to see what people have come up with. We're trying to keep track of where everyone is, and hopefully we can help each other to get lots of projects completed so that we can showcase these to friends soon. I will be good to get some screenshots online as well.","tags":"scratch","title":"Exciting Scratch projects are happening"},{"url":"/python-level-based-challenges.html","text":"Looking through various Python tutorials that are online for kids, I can kind of see why some of the initial rewards can seem 'boring' to kids who are being lured by the pretty graphics and animations of modern tablets. Coding challenges and Capture The Flag (CTF) team competitions have always seemed a bit more exciting than talking about text-adventures sometimes. Although we're probably not up to CTFs or the Google coding challenges that are running, I came across a fun level-based Python challenge , written by Nadav Sanet , that just happens to align quite well with our Code Club activities. ;) The idea behind this particular challenge is: solve the problem by writing a Python script get to the next level web page solve the next problem ...and so on. I reckon this will be loads more fun because writing the script actually leads to progression in the game itself! It also lends itself to teamwork, and I can drop clues as we go. Hopefully this will be tons more satisfying to work through from week to week, and will also get us thinking a lot more to solve a problem and see how far we can get. Last year we had some good competition building up between groups working on the robots, and with our quiz. This may help tap into that energy again, while showing how various components work together. So before we start, here's a screenshot: I'll let you know how it goes... :)","tags":"python","title":"Python level-based challenges"},{"url":"/spyder-python-ide.html","text":"Tools for writing Python An Integrated Development Environment (IDE) is software that integrates tools for programming. As we've seen, for Code Club, the basic tools we need for kids to program in Python are (assuming we've install Python): - a Python shell to try out commands with immediate feedback - an editor, with a simple interface, to create Python scripts containing our code - an environment to run our scripts that gives us errors when we make mistakes Other features, I see as optional, but useful include: - syntax highlighting, where our code is colour coded to make formatting mistakes more obvious when editing; - auto-completion, where the editor helps us a bit by suggesting commands that might be useful (I think this can be a little confusing when just starting); and - a debugging interface that can let us stop, or single-step, our code while it is running, so we can find where our script might be going wrong. Our first experiences at Code Club When we first started doing Python activities, the main problem that came up was kids getting confused as to whether they were in a Python shell, editing, or running their code. Once we explained that their script was just a text file, and that they could edit it in something as simple as notepad, things became a little easier. Some of us had a bit of an issue with typing things out, so it was good to run code often and see things happening. Some of us preferred Windows and some preferred MacOSX. That's where the Python cheat sheet (see the link above) came from. Something to try As we have a mixture of netbooks, macbooks, and imacs, and 3 Raspberry Pis, the environment we've been writing our code in varies. Being a bit of a nerd, in an effort to make sure we at least do something during our Code Club session, I'll often just use whatever text editor I can find to write Python. Sometimes this includes the nano editor, which I'm sure everyone gets a bit frustrated with, but I firmly believe will help us be more adaptable when we don't have a pretty graphical interface. I'm sure this drives people a bit mad ;) but hopefully it's all good when the code eventually runs :). After all this rambling on, the main point is that I tried the Spyder Python IDE (Scientific PYthon Development EnviRonment) recently, and it seems close to what we need. Personally I like things like Wing IDE but for teaching kids we just need something simple, where they get the main tools listed above. Spyder seems to run on the operating systems we encounter, and unlike some of the other tools, has a more intuitive interface for kids. It also has syntax highlighting and tells them what version of Python they are using. To me, it's important that people have a tool they can use install and use at home, since Code Club is only one hour a week for us. Anyway, it looks like this: If you'd like to try it, there's instructions for installing Spyder version 2 here","tags":"python","title":"Spyder Python IDE"},{"url":"/keeping-what-youve-learned.html","text":"I used to scribble a ton of stuff in the back of one of my old Commodore64 manuals. Whenever I'd find something cool in a magazine or book, or later, text files, I'd scrawl it in. There was something about it being a bit messy that made it easier to remember. These days, there's a ton of different ways to do that online or in files, but most smart coders I know just go and look up their own code. i.e. things they've done previously. One of the coolest things about working out a good way to do something in code, is that you can go back whenever you need to do that. A classic example could be a script that reads lines from a file and makes some change to every line, before writing out a new file. That's the type of thing that you'd probably find yourself wanting to do for lots of scripts, so you'd probably keep that script. You'll probably keep improving the script as you get better at coding and come across more 'gotchas' that can be avoided by wrinting better code. Another way of remembering things is to recognise and remember patterns, or idioms. Idiomatic Python has been a really good reference for getting things done in Python, using consistent and practical structure. It's not the only way to do things, but has some logic reasoning behind it. Although there's a ton of information on the Internet, there's also a lot of bad information, so you really have to sift through to find the good information. And before you ask questions on forums or places like Stack Overflow , make sure you've put some effort in and done some hard searching first. People tend to help those who put in the work, rather than those who ask before trying. And if this doesn't work, sometimes the edited structure of a good book can be very helpful as well. Something that will also help, is to just keep at it. Forcing yourself to push through tough problems and finishing projects will really train your brain and make things a lot easier to learn in the future. Collaborating can also be a great way to learn, since the load is spread over more than one person, and decisions are sometime easier to make as a group.","tags":"python","title":"Keeping what you've learned"},{"url":"/moving-from-scratch-to-python.html","text":"So going from visual programming like Scratch to a text-based language can intially seem a bit lame. Yep, that makes sense to me. We've just gone from something that lets us drag blocks into a window with spinning monkeys and bouncing balls, to...typing words, that makes a few words come up on the screen, or draws a boring star. The other thing that made this change kind of suck, is that things don't work nearly as easily as Scratch does, at first. So some of the annoying things that have slowed us down include: laptops having the wrong version of Python on them, so we had to change our code or the commands to run things IDLE being confusing or not running having to edit things with weird editors AND WHAT ARE THESE CRAZY ERRORS!!!?!??? Scratch didn't have these!!! Our grand plan is that we have a heap of different activities running at one, and people can choose what they want to do. The only thing we need to remember with that plan is that we need to show parents and teachers that we're making cool stuff, learning, and having fun. So keeping this in mind, we wouldn't be going through all of this if Python wasn't helping us make cool stuff and having even more fun...eventually. It's pretty easy to do fun stuff with Scratch because we move things and see if the collide.. and w00t we have a game! And even though we can use Scratch to do things like robots, and make lights go on, there are limitations. We have Stencyl, but more about that in a later post ;) As for Python, even some teachers have been asking what it can do. We know it can do crazy things that seem a long way from our simple scripts, but here's some uses that only require simple scripts: read web pages and extract information we want, then do things with it make a script that waits for something to happen, say if someone triggers a sensor or touches your computer, lock them out andrecord them with a camera and then email it to you make robots do interesting things, like stream video to a website, balance on 2 wheels, detect faces, analyse writing from a photo and speak it, understand its surroundings and avoid or pick up objects create chat bots that pretend to be human and interact with social media automate repetitive tasks, such as renaming lots of files, or converting large amounts of audio files to another format, or sorting and converting videos based on a particular attribute such as date or name decode information from radio signals, such as airplane coordinates, and plot them on google earth extract geographical information from photos and see where someone has been at given times this blog uses software written in Python to generate all the web pages among some of the software built with Python are some great artificial intellingence tools that can be integrated into other projects To sort out the details of trying out commands, editing, and running out Python, I put together an updated-from-the-other-day cheatsheet A big advantage of learning to code in Python is that we don't have to worry about a lot of complicated syntax (rules for formatting the code) or extra code to make it work. It runs on many more things than Scratch does, and can do much more complicated work and still have simple, readable code. And once we know a bit about Python, there's a whole lot of extra modules available Understanding a programming language means you can have an idea, but actually make it.","tags":"python","title":"Moving from Scratch to Python"},{"url":"/cloning-sprites.html","text":"Someone asked me about duplicating a ball, that would drop down for the game character to dodge.. One of the concepts we looked at last year in Code Club, was creating lots of instances of one sprite. In the simple zombie game I made, this was an easy way to spawn a ton of zombies as the game progresses. At first, the obvious way to do that is by creating lots of sprites. But that's probably a bit too much work. Boooo!! An easier way would be: If something happens, clone a sprite. When a clone is created, do things (like make balls move downwards until they hit something). An activity I looked at for Code Club last year uses clones. It's called Catch the Dots . The game itself is pretty good fun to play too! As for doing gravity to make things fall, Al Sweigart explains it really well in his series, InventWithScratch: Oh, and did you notice that he has a cool tip for running certain parts really fast?","tags":"scratch","title":"Cloning sprites"},{"url":"/term-1-python-roundup.html","text":"In term 1, grade 6 people who were in Code Club last year, went through some Python concepts. The activities we had a go at were: Using a text editor e.g. notepad, in Windows, we went through the inventwithpython guess the number exercise. We discovered that the Macbooks' Windows defaulted to Python 2, which we later fixed by running our scripts from the cmd prompt using: py -3 <ourfile.py> . Some people had a go at copying and pasting the code and soon found out that this changed formatting as well as copying the line numbers. In some ways, this was more work because line numbers had to be taken out, indenting had to be restored, and carriage returns needed to be re-added. Our Python coding (development) environment at this stage consists of: A Python shell that allows us to type in interactive Python commands, to see how things work before putting commands into a script. Later this was especially useful when using the Python turtle module. A text editor. We used text editors because, previously, we'd had varying success with IDLE and Tinker. It was a little confusing to easily see the difference between the editor and shell when loading scripts in IDLE. In Windows we used notepad because it's already there, in OSX we used nano from the terminal. Nano was useful when we later connected to the Raspberry Pi using ssh to build things with Python Minecraft Pi module functions. This is also useful since we also have some robots that we run with model 1B Raspberry Pis. A command shell/window. We ran out scripts after running cmd.exe to get a command window. Later we found that it was easier to just save our scripts, but keep them in the editor, so that we could easily make changes to fix errors or add different code. Code Club turtle activities. This time we discovered that the netbooks running Windows did not have Python3 at all. So we ended up trying to do things in the Python shell, but it was a frustrating session. A few of us ran some of the turtle scripts, which didn't need Python3. The initial idea of this session was to build on the previous 'guess the number' activity by adding loops and introducing the concepts of: Don't repeat yourself(DRY). This means trying to write efficient code, using structures such as loops, to repeat the same commands. Functions. This is part of DRY. Troubleshooting errors. I think we needed to get started quicker. This worked better in the next session. Continued Code Club Turtle activities. We were one teacher down for this one in the later part of the session. Things worked better because we sat on a round table and I think it was easier to talk to everyone to get things working. I think we all got multiple stars drawing this time, with some people opting to use OSX, which was easier. Some things we looked at were: The basic idea that we our scripts are starting to have: An initialistion section. We set up things like variables here. This was easy to remember by talking about what happens when we don't reset our score when re-running a Scratch game. Function definitions. Main, which usually contains our commands or main loop that controls everything, and where we call functions we created. Functions. We looked at the ideas of: Built-in functions that come with Python Functions that we can import from modules User-defined functions that we define ourselves. Adding parameters to change how our user-defined functions work. An example of how we define our own Python function could be: def star (): for i in range ( 6 ): forward ( 100 ) right ( 120 ) Then this would give us a star() command that we could use to draw a star without typing all those lines. Later we looked at adding parameters so we could tell the function how big, or what colour to draw the star with. At a later stage we'll look at functions that can 'return' information to us when called. Using a Raspberry Pi computer and connecting with ssh and the OSX terminal, we examined, ran, and edited Python scripts to try and build a building in Minecraft Pi.","tags":"python","title":"Term 1 Python roundup"}]}